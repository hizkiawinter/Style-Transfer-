"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Machines = void 0;
const machinesGetV1Machines_js_1 = require("../funcs/machinesGetV1Machines.js");
const machinesGetV1MachinesMachineId_js_1 = require("../funcs/machinesGetV1MachinesMachineId.js");
const machinesPostGpuEvent_js_1 = require("../funcs/machinesPostGpuEvent.js");
const machinesPostV1Machines_js_1 = require("../funcs/machinesPostV1Machines.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Machines extends sdks_js_1.ClientSDK {
    /**
     * Register a machine event
     */
    async postGpuEvent(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, machinesPostGpuEvent_js_1.machinesPostGpuEvent)(this, request, options));
    }
    /**
     * Retrieve all machines for a user
     *
     * @remarks
     * Retrieve details of all machines for the authenticated user, with pagination and optional field selection
     */
    async getV1Machines(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, machinesGetV1Machines_js_1.machinesGetV1Machines)(this, request, options));
    }
    /**
     * Create a new machine
     *
     * @remarks
     * Create a new machine with optional default setting
     */
    async postV1Machines(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, machinesPostV1Machines_js_1.machinesPostV1Machines)(this, request, options));
    }
    /**
     * Retrieve a specific machine by ID
     *
     * @remarks
     * Retrieve details of a specific machine by its ID, with optional workspace details
     */
    async getV1MachinesMachineId(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, machinesGetV1MachinesMachineId_js_1.machinesGetV1MachinesMachineId)(this, request, options));
    }
}
exports.Machines = Machines;
//# sourceMappingURL=machines.js.map