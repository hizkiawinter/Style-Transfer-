import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
export declare class Run extends ClientSDK {
    /**
     * Get Run
     */
    get(request: operations.GetRunRunRunIdGetRequest, options?: RequestOptions): Promise<components.WorkflowRunModel>;
    /**
     * Queue a workflow
     *
     * @remarks
     * Create a new workflow run with the given parameters. This function sets up the run and initiates the execution process. For callback information, see [Callbacks](#tag/callbacks/POST/\{callback_url\}).
     */
    queue(request: operations.CreateRunQueueRunQueuePostData, options?: RequestOptions): Promise<components.CreateRunResponse>;
    /**
     * Run a workflow in sync
     *
     * @remarks
     * Create a new workflow run with the given parameters. This function sets up the run and initiates the execution process. For callback information, see [Callbacks](#tag/callbacks/POST/\{callback_url\}).
     */
    sync(request: operations.CreateRunSyncRunSyncPostData, options?: RequestOptions): Promise<Array<components.WorkflowRunOutputModel>>;
    /**
     * Run a workflow in stream
     *
     * @remarks
     * Create a new workflow run with the given parameters. This function sets up the run and initiates the execution process. For callback information, see [Callbacks](#tag/callbacks/POST/\{callback_url\}).
     */
    stream(request: operations.CreateRunStreamRunStreamPostData, options?: RequestOptions): Promise<EventStream<components.RunStream>>;
}
//# sourceMappingURL=run.d.ts.map