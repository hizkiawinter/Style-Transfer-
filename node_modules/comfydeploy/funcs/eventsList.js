"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventsList = eventsList;
const encodings_js_1 = require("../lib/encodings.js");
const m$ = __importStar(require("../lib/matchers.js"));
const schemas$ = __importStar(require("../lib/schemas.js"));
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../models/errors/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const z = __importStar(require("zod"));
/**
 * Get recent gpu events
 */
async function eventsList(client$, request, options) {
    const input$ = request;
    const parsed$ = schemas$.safeParse(input$, (value$) => operations.GetMachineMachineIdEventsRequest$outboundSchema.parse(value$), "Input validation failed");
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = null;
    const pathParams$ = {
        machine_id: (0, encodings_js_1.encodeSimple)("machine_id", payload$.machine_id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path$ = (0, url_js_1.pathToFunc)("/machine/{machine_id}/events")(pathParams$);
    const query$ = (0, encodings_js_1.encodeFormQuery)({
        limit: payload$.limit,
        status: payload$.status,
    });
    const headers$ = new Headers({
        Accept: "application/json",
    });
    const bearerAuth$ = await (0, security_js_1.extractSecurity)(client$.options$.bearerAuth);
    const security$ = bearerAuth$ == null ? {} : { bearerAuth: bearerAuth$ };
    const context = {
        operationID: "get_/machine/{machine_id}/events",
        oAuth2Scopes: [],
        securitySource: client$.options$.bearerAuth,
    };
    const securitySettings$ = (0, security_js_1.resolveGlobalSecurity)(security$);
    const requestRes = client$.createRequest$(context, {
        security: securitySettings$,
        method: "GET",
        path: path$,
        headers: headers$,
        query: query$,
        body: body$,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client$.options$.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;
    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["401", "4XX", "500", "5XX"],
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client$.options$.retryConfig,
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields$ = {
        HttpMeta: { Response: response, Request: request$ },
    };
    const [result$] = await m$.match(m$.json(200, z.array(operations.GetMachineMachineIdEventsResponseBody$inboundSchema)), m$.fail([401, "4XX", "5XX"]), m$.jsonErr(500, errors.GetMachineMachineIdEventsResponseBody$inboundSchema))(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }
    return result$;
}
//# sourceMappingURL=eventsList.js.map