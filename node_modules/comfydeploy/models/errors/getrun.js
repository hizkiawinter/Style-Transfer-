"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRunResponseBody$ = exports.GetRunResponseBody$outboundSchema = exports.GetRunResponseBody$inboundSchema = exports.GetRunRunResponseBody$ = exports.GetRunRunResponseBody$outboundSchema = exports.GetRunRunResponseBody$inboundSchema = exports.GetRunResponseBody = exports.GetRunRunResponseBody = void 0;
const z = __importStar(require("zod"));
/**
 * Error getting output
 */
class GetRunRunResponseBody extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.error = err.error;
        this.name = "GetRunRunResponseBody";
    }
}
exports.GetRunRunResponseBody = GetRunRunResponseBody;
/**
 * Workflow not found
 */
class GetRunResponseBody extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.code = err.code;
        this.name = "GetRunResponseBody";
    }
}
exports.GetRunResponseBody = GetRunResponseBody;
/** @internal */
exports.GetRunRunResponseBody$inboundSchema = z.object({
    error: z.string(),
})
    .transform((v) => {
    return new GetRunRunResponseBody(v);
});
/** @internal */
exports.GetRunRunResponseBody$outboundSchema = z.instanceof(GetRunRunResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunRunResponseBody$;
(function (GetRunRunResponseBody$) {
    /** @deprecated use `GetRunRunResponseBody$inboundSchema` instead. */
    GetRunRunResponseBody$.inboundSchema = exports.GetRunRunResponseBody$inboundSchema;
    /** @deprecated use `GetRunRunResponseBody$outboundSchema` instead. */
    GetRunRunResponseBody$.outboundSchema = exports.GetRunRunResponseBody$outboundSchema;
})(GetRunRunResponseBody$ || (exports.GetRunRunResponseBody$ = GetRunRunResponseBody$ = {}));
/** @internal */
exports.GetRunResponseBody$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
})
    .transform((v) => {
    return new GetRunResponseBody(v);
});
/** @internal */
exports.GetRunResponseBody$outboundSchema = z.instanceof(GetRunResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
    code: z.string(),
    message: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunResponseBody$;
(function (GetRunResponseBody$) {
    /** @deprecated use `GetRunResponseBody$inboundSchema` instead. */
    GetRunResponseBody$.inboundSchema = exports.GetRunResponseBody$inboundSchema;
    /** @deprecated use `GetRunResponseBody$outboundSchema` instead. */
    GetRunResponseBody$.outboundSchema = exports.GetRunResponseBody$outboundSchema;
})(GetRunResponseBody$ || (exports.GetRunResponseBody$ = GetRunResponseBody$ = {}));
//# sourceMappingURL=getrun.js.map