"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostRunResponseBody$ = exports.PostRunResponseBody$outboundSchema = exports.PostRunResponseBody$inboundSchema = exports.PostRunRequestBody$ = exports.PostRunRequestBody$outboundSchema = exports.PostRunRequestBody$inboundSchema = exports.Inputs$ = exports.Inputs$outboundSchema = exports.Inputs$inboundSchema = exports.RunOrigin$ = exports.RunOrigin$outboundSchema = exports.RunOrigin$inboundSchema = exports.Gpu$ = exports.Gpu$outboundSchema = exports.Gpu$inboundSchema = exports.RunOrigin = exports.Gpu = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.Gpu = {
    T4: "T4",
    L4: "L4",
    A10G: "A10G",
    A100: "A100",
    A10080Gb: "A100-80GB",
    H100: "H100",
};
exports.RunOrigin = {
    Manual: "manual",
    Api: "api",
    PublicShare: "public-share",
    PublicTemplate: "public-template",
    Workspace: "workspace",
};
/** @internal */
exports.Gpu$inboundSchema = z.nativeEnum(exports.Gpu);
/** @internal */
exports.Gpu$outboundSchema = exports.Gpu$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Gpu$;
(function (Gpu$) {
    /** @deprecated use `Gpu$inboundSchema` instead. */
    Gpu$.inboundSchema = exports.Gpu$inboundSchema;
    /** @deprecated use `Gpu$outboundSchema` instead. */
    Gpu$.outboundSchema = exports.Gpu$outboundSchema;
})(Gpu$ || (exports.Gpu$ = Gpu$ = {}));
/** @internal */
exports.RunOrigin$inboundSchema = z
    .nativeEnum(exports.RunOrigin);
/** @internal */
exports.RunOrigin$outboundSchema = exports.RunOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RunOrigin$;
(function (RunOrigin$) {
    /** @deprecated use `RunOrigin$inboundSchema` instead. */
    RunOrigin$.inboundSchema = exports.RunOrigin$inboundSchema;
    /** @deprecated use `RunOrigin$outboundSchema` instead. */
    RunOrigin$.outboundSchema = exports.RunOrigin$outboundSchema;
})(RunOrigin$ || (exports.RunOrigin$ = RunOrigin$ = {}));
/** @internal */
exports.Inputs$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
exports.Inputs$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Inputs$;
(function (Inputs$) {
    /** @deprecated use `Inputs$inboundSchema` instead. */
    Inputs$.inboundSchema = exports.Inputs$inboundSchema;
    /** @deprecated use `Inputs$outboundSchema` instead. */
    Inputs$.outboundSchema = exports.Inputs$outboundSchema;
})(Inputs$ || (exports.Inputs$ = Inputs$ = {}));
/** @internal */
exports.PostRunRequestBody$inboundSchema = z.object({
    deployment_id: z.string().optional(),
    workflow_api: z.any().optional(),
    workflow_api_json: z.string().optional(),
    workflow_id: z.string().optional(),
    machine_id: z.string().optional(),
    gpu: exports.Gpu$inboundSchema.optional(),
    concurrency_limit: z.number().optional(),
    private_volume_name: z.string().optional(),
    timeout: z.number().optional(),
    run_origin: exports.RunOrigin$inboundSchema.optional(),
    inputs: z.record(z.union([z.string(), z.number()])).optional(),
    inputs_json: z.string().optional(),
    webhook: z.string().optional(),
    webhook_intermediate_status: z.boolean().optional(),
    stream: z.boolean().optional(),
    batch_number: z.number().default(1),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "deployment_id": "deploymentId",
        "workflow_api": "workflowApi",
        "workflow_api_json": "workflowApiJson",
        "workflow_id": "workflowId",
        "machine_id": "machineId",
        "concurrency_limit": "concurrencyLimit",
        "private_volume_name": "privateVolumeName",
        "run_origin": "runOrigin",
        "inputs_json": "inputsJson",
        "webhook_intermediate_status": "webhookIntermediateStatus",
        "batch_number": "batchNumber",
    });
});
/** @internal */
exports.PostRunRequestBody$outboundSchema = z.object({
    deploymentId: z.string().optional(),
    workflowApi: z.any().optional(),
    workflowApiJson: z.string().optional(),
    workflowId: z.string().optional(),
    machineId: z.string().optional(),
    gpu: exports.Gpu$outboundSchema.optional(),
    concurrencyLimit: z.number().optional(),
    privateVolumeName: z.string().optional(),
    timeout: z.number().optional(),
    runOrigin: exports.RunOrigin$outboundSchema.optional(),
    inputs: z.record(z.union([z.string(), z.number()])).optional(),
    inputsJson: z.string().optional(),
    webhook: z.string().optional(),
    webhookIntermediateStatus: z.boolean().optional(),
    stream: z.boolean().optional(),
    batchNumber: z.number().default(1),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        deploymentId: "deployment_id",
        workflowApi: "workflow_api",
        workflowApiJson: "workflow_api_json",
        workflowId: "workflow_id",
        machineId: "machine_id",
        concurrencyLimit: "concurrency_limit",
        privateVolumeName: "private_volume_name",
        runOrigin: "run_origin",
        inputsJson: "inputs_json",
        webhookIntermediateStatus: "webhook_intermediate_status",
        batchNumber: "batch_number",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostRunRequestBody$;
(function (PostRunRequestBody$) {
    /** @deprecated use `PostRunRequestBody$inboundSchema` instead. */
    PostRunRequestBody$.inboundSchema = exports.PostRunRequestBody$inboundSchema;
    /** @deprecated use `PostRunRequestBody$outboundSchema` instead. */
    PostRunRequestBody$.outboundSchema = exports.PostRunRequestBody$outboundSchema;
})(PostRunRequestBody$ || (exports.PostRunRequestBody$ = PostRunRequestBody$ = {}));
/** @internal */
exports.PostRunResponseBody$inboundSchema = z.object({
    run_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "run_id": "runId",
    });
});
/** @internal */
exports.PostRunResponseBody$outboundSchema = z.object({
    runId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        runId: "run_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostRunResponseBody$;
(function (PostRunResponseBody$) {
    /** @deprecated use `PostRunResponseBody$inboundSchema` instead. */
    PostRunResponseBody$.inboundSchema = exports.PostRunResponseBody$inboundSchema;
    /** @deprecated use `PostRunResponseBody$outboundSchema` instead. */
    PostRunResponseBody$.outboundSchema = exports.PostRunResponseBody$outboundSchema;
})(PostRunResponseBody$ || (exports.PostRunResponseBody$ = PostRunResponseBody$ = {}));
//# sourceMappingURL=postrun.js.map