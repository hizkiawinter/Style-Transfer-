"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostGpuEventResponseBody$ = exports.PostGpuEventResponseBody$outboundSchema = exports.PostGpuEventResponseBody$inboundSchema = exports.PostGpuEventRequestBody$ = exports.PostGpuEventRequestBody$outboundSchema = exports.PostGpuEventRequestBody$inboundSchema = exports.GpuProvider$ = exports.GpuProvider$outboundSchema = exports.GpuProvider$inboundSchema = exports.EventType$ = exports.EventType$outboundSchema = exports.EventType$inboundSchema = exports.WsGpuType$ = exports.WsGpuType$outboundSchema = exports.WsGpuType$inboundSchema = exports.GpuType$ = exports.GpuType$outboundSchema = exports.GpuType$inboundSchema = exports.GpuProvider = exports.EventType = exports.WsGpuType = exports.GpuType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.GpuType = {
    T4: "T4",
    L4: "L4",
    A10G: "A10G",
    A100: "A100",
    A10080Gb: "A100-80GB",
    H100: "H100",
};
exports.WsGpuType = {
    FourThousandAndNinety: "4090",
};
exports.EventType = {
    GpuStart: "gpu_start",
    GpuEnd: "gpu_end",
};
exports.GpuProvider = {
    Modal: "modal",
    Runpod: "runpod",
};
/** @internal */
exports.GpuType$inboundSchema = z
    .nativeEnum(exports.GpuType);
/** @internal */
exports.GpuType$outboundSchema = exports.GpuType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GpuType$;
(function (GpuType$) {
    /** @deprecated use `GpuType$inboundSchema` instead. */
    GpuType$.inboundSchema = exports.GpuType$inboundSchema;
    /** @deprecated use `GpuType$outboundSchema` instead. */
    GpuType$.outboundSchema = exports.GpuType$outboundSchema;
})(GpuType$ || (exports.GpuType$ = GpuType$ = {}));
/** @internal */
exports.WsGpuType$inboundSchema = z
    .nativeEnum(exports.WsGpuType);
/** @internal */
exports.WsGpuType$outboundSchema = exports.WsGpuType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WsGpuType$;
(function (WsGpuType$) {
    /** @deprecated use `WsGpuType$inboundSchema` instead. */
    WsGpuType$.inboundSchema = exports.WsGpuType$inboundSchema;
    /** @deprecated use `WsGpuType$outboundSchema` instead. */
    WsGpuType$.outboundSchema = exports.WsGpuType$outboundSchema;
})(WsGpuType$ || (exports.WsGpuType$ = WsGpuType$ = {}));
/** @internal */
exports.EventType$inboundSchema = z
    .nativeEnum(exports.EventType);
/** @internal */
exports.EventType$outboundSchema = exports.EventType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventType$;
(function (EventType$) {
    /** @deprecated use `EventType$inboundSchema` instead. */
    EventType$.inboundSchema = exports.EventType$inboundSchema;
    /** @deprecated use `EventType$outboundSchema` instead. */
    EventType$.outboundSchema = exports.EventType$outboundSchema;
})(EventType$ || (exports.EventType$ = EventType$ = {}));
/** @internal */
exports.GpuProvider$inboundSchema = z
    .nativeEnum(exports.GpuProvider);
/** @internal */
exports.GpuProvider$outboundSchema = exports.GpuProvider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GpuProvider$;
(function (GpuProvider$) {
    /** @deprecated use `GpuProvider$inboundSchema` instead. */
    GpuProvider$.inboundSchema = exports.GpuProvider$inboundSchema;
    /** @deprecated use `GpuProvider$outboundSchema` instead. */
    GpuProvider$.outboundSchema = exports.GpuProvider$outboundSchema;
})(GpuProvider$ || (exports.GpuProvider$ = GpuProvider$ = {}));
/** @internal */
exports.PostGpuEventRequestBody$inboundSchema = z.object({
    machine_id: z.string(),
    timestamp: z.string(),
    gpuType: z.nullable(exports.GpuType$inboundSchema).optional(),
    wsGpuType: z.nullable(exports.WsGpuType$inboundSchema).optional(),
    eventType: exports.EventType$inboundSchema,
    gpu_provider: exports.GpuProvider$inboundSchema,
    event_id: z.nullable(z.string()).optional(),
    is_workspace: z.nullable(z.boolean()).optional(),
    user_id: z.nullable(z.string()).optional(),
    org_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "machine_id": "machineId",
        "gpu_provider": "gpuProvider",
        "event_id": "eventId",
        "is_workspace": "isWorkspace",
        "user_id": "userId",
        "org_id": "orgId",
    });
});
/** @internal */
exports.PostGpuEventRequestBody$outboundSchema = z.object({
    machineId: z.string(),
    timestamp: z.string(),
    gpuType: z.nullable(exports.GpuType$outboundSchema).optional(),
    wsGpuType: z.nullable(exports.WsGpuType$outboundSchema).optional(),
    eventType: exports.EventType$outboundSchema,
    gpuProvider: exports.GpuProvider$outboundSchema,
    eventId: z.nullable(z.string()).optional(),
    isWorkspace: z.nullable(z.boolean()).optional(),
    userId: z.nullable(z.string()).optional(),
    orgId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        machineId: "machine_id",
        gpuProvider: "gpu_provider",
        eventId: "event_id",
        isWorkspace: "is_workspace",
        userId: "user_id",
        orgId: "org_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostGpuEventRequestBody$;
(function (PostGpuEventRequestBody$) {
    /** @deprecated use `PostGpuEventRequestBody$inboundSchema` instead. */
    PostGpuEventRequestBody$.inboundSchema = exports.PostGpuEventRequestBody$inboundSchema;
    /** @deprecated use `PostGpuEventRequestBody$outboundSchema` instead. */
    PostGpuEventRequestBody$.outboundSchema = exports.PostGpuEventRequestBody$outboundSchema;
})(PostGpuEventRequestBody$ || (exports.PostGpuEventRequestBody$ = PostGpuEventRequestBody$ = {}));
/** @internal */
exports.PostGpuEventResponseBody$inboundSchema = z.object({
    event_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "event_id": "eventId",
    });
});
/** @internal */
exports.PostGpuEventResponseBody$outboundSchema = z.object({
    eventId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        eventId: "event_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostGpuEventResponseBody$;
(function (PostGpuEventResponseBody$) {
    /** @deprecated use `PostGpuEventResponseBody$inboundSchema` instead. */
    PostGpuEventResponseBody$.inboundSchema = exports.PostGpuEventResponseBody$inboundSchema;
    /** @deprecated use `PostGpuEventResponseBody$outboundSchema` instead. */
    PostGpuEventResponseBody$.outboundSchema = exports.PostGpuEventResponseBody$outboundSchema;
})(PostGpuEventResponseBody$ || (exports.PostGpuEventResponseBody$ = PostGpuEventResponseBody$ = {}));
//# sourceMappingURL=postgpuevent.js.map