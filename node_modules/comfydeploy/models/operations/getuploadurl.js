"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUploadUrlResponseBody$ = exports.GetUploadUrlResponseBody$outboundSchema = exports.GetUploadUrlResponseBody$inboundSchema = exports.GetUploadUrlRequest$ = exports.GetUploadUrlRequest$outboundSchema = exports.GetUploadUrlRequest$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.Type = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.Type = {
    ImagePng: "image/png",
    ImageJpg: "image/jpg",
    ImageJpeg: "image/jpeg",
    ImageWebp: "image/webp",
    VideoMp4: "video/mp4",
    VideoWebm: "video/webm",
    ApplicationOctetStream: "application/octet-stream",
    ApplicationZip: "application/zip",
};
/** @internal */
exports.Type$inboundSchema = z.nativeEnum(exports.Type);
/** @internal */
exports.Type$outboundSchema = exports.Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = exports.Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = exports.Type$outboundSchema;
})(Type$ || (exports.Type$ = Type$ = {}));
/** @internal */
exports.GetUploadUrlRequest$inboundSchema = z.object({
    type: exports.Type$inboundSchema,
    file_extension: z.string().optional(),
    file_size: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "file_extension": "fileExtension",
        "file_size": "fileSize",
    });
});
/** @internal */
exports.GetUploadUrlRequest$outboundSchema = z.object({
    type: exports.Type$outboundSchema,
    fileExtension: z.string().optional(),
    fileSize: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        fileExtension: "file_extension",
        fileSize: "file_size",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetUploadUrlRequest$;
(function (GetUploadUrlRequest$) {
    /** @deprecated use `GetUploadUrlRequest$inboundSchema` instead. */
    GetUploadUrlRequest$.inboundSchema = exports.GetUploadUrlRequest$inboundSchema;
    /** @deprecated use `GetUploadUrlRequest$outboundSchema` instead. */
    GetUploadUrlRequest$.outboundSchema = exports.GetUploadUrlRequest$outboundSchema;
})(GetUploadUrlRequest$ || (exports.GetUploadUrlRequest$ = GetUploadUrlRequest$ = {}));
/** @internal */
exports.GetUploadUrlResponseBody$inboundSchema = z.object({
    upload_url: z.string(),
    file_id: z.string(),
    download_url: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "upload_url": "uploadUrl",
        "file_id": "fileId",
        "download_url": "downloadUrl",
    });
});
/** @internal */
exports.GetUploadUrlResponseBody$outboundSchema = z.object({
    uploadUrl: z.string(),
    fileId: z.string(),
    downloadUrl: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        uploadUrl: "upload_url",
        fileId: "file_id",
        downloadUrl: "download_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetUploadUrlResponseBody$;
(function (GetUploadUrlResponseBody$) {
    /** @deprecated use `GetUploadUrlResponseBody$inboundSchema` instead. */
    GetUploadUrlResponseBody$.inboundSchema = exports.GetUploadUrlResponseBody$inboundSchema;
    /** @deprecated use `GetUploadUrlResponseBody$outboundSchema` instead. */
    GetUploadUrlResponseBody$.outboundSchema = exports.GetUploadUrlResponseBody$outboundSchema;
})(GetUploadUrlResponseBody$ || (exports.GetUploadUrlResponseBody$ = GetUploadUrlResponseBody$ = {}));
//# sourceMappingURL=getuploadurl.js.map