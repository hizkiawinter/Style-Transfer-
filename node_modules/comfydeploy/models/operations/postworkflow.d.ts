import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
export type WorkflowApi = {
    inputs: {
        [k: string]: any;
    };
    classType?: string | undefined;
};
export type GitCustomNodes = {
    hash: string;
    disabled: boolean;
};
export type Snapshot = {
    comfyui: string;
    gitCustomNodes: {
        [k: string]: GitCustomNodes;
    };
    fileCustomNodes: Array<any>;
};
export type Node = {
    inputs: {
        [k: string]: any;
    };
    classType?: string | undefined;
};
export declare const One: {
    readonly Copy: "copy";
    readonly Unzip: "unzip";
    readonly GitClone: "git-clone";
};
export type One = ClosedEnum<typeof One>;
export type InstallType = One | string;
export type CustomNodes = {
    name: string;
    node?: Array<Node> | undefined;
    hash?: string | undefined;
    url: string;
    files?: Array<string> | undefined;
    installType?: One | string | undefined;
    warning?: string | undefined;
    pip?: Array<string> | undefined;
};
export type Models = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};
export type Files = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};
export type Dependencies = {
    comfyui: string;
    missingNodes: Array<string>;
    customNodes: {
        [k: string]: CustomNodes;
    };
    models: {
        [k: string]: Array<Models>;
    };
    files: {
        [k: string]: Array<Files>;
    };
};
export type PostWorkflowRequestBody = {
    workflowId?: string | undefined;
    workflowName?: string | undefined;
    workflow?: any | undefined;
    workflowApi: {
        [k: string]: WorkflowApi;
    };
    snapshot: Snapshot;
    dependencies?: Dependencies | undefined;
};
/**
 * Retrieve the output
 */
export type PostWorkflowResponseBody = {
    workflowId: string;
    version: string;
};
/** @internal */
export declare const WorkflowApi$inboundSchema: z.ZodType<WorkflowApi, z.ZodTypeDef, unknown>;
/** @internal */
export type WorkflowApi$Outbound = {
    inputs: {
        [k: string]: any;
    };
    class_type?: string | undefined;
};
/** @internal */
export declare const WorkflowApi$outboundSchema: z.ZodType<WorkflowApi$Outbound, z.ZodTypeDef, WorkflowApi>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WorkflowApi$ {
    /** @deprecated use `WorkflowApi$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WorkflowApi, z.ZodTypeDef, unknown>;
    /** @deprecated use `WorkflowApi$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WorkflowApi$Outbound, z.ZodTypeDef, WorkflowApi>;
    /** @deprecated use `WorkflowApi$Outbound` instead. */
    type Outbound = WorkflowApi$Outbound;
}
/** @internal */
export declare const GitCustomNodes$inboundSchema: z.ZodType<GitCustomNodes, z.ZodTypeDef, unknown>;
/** @internal */
export type GitCustomNodes$Outbound = {
    hash: string;
    disabled: boolean;
};
/** @internal */
export declare const GitCustomNodes$outboundSchema: z.ZodType<GitCustomNodes$Outbound, z.ZodTypeDef, GitCustomNodes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitCustomNodes$ {
    /** @deprecated use `GitCustomNodes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitCustomNodes, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitCustomNodes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitCustomNodes$Outbound, z.ZodTypeDef, GitCustomNodes>;
    /** @deprecated use `GitCustomNodes$Outbound` instead. */
    type Outbound = GitCustomNodes$Outbound;
}
/** @internal */
export declare const Snapshot$inboundSchema: z.ZodType<Snapshot, z.ZodTypeDef, unknown>;
/** @internal */
export type Snapshot$Outbound = {
    comfyui: string;
    git_custom_nodes: {
        [k: string]: GitCustomNodes$Outbound;
    };
    file_custom_nodes: Array<any>;
};
/** @internal */
export declare const Snapshot$outboundSchema: z.ZodType<Snapshot$Outbound, z.ZodTypeDef, Snapshot>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Snapshot$ {
    /** @deprecated use `Snapshot$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Snapshot, z.ZodTypeDef, unknown>;
    /** @deprecated use `Snapshot$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Snapshot$Outbound, z.ZodTypeDef, Snapshot>;
    /** @deprecated use `Snapshot$Outbound` instead. */
    type Outbound = Snapshot$Outbound;
}
/** @internal */
export declare const Node$inboundSchema: z.ZodType<Node, z.ZodTypeDef, unknown>;
/** @internal */
export type Node$Outbound = {
    inputs: {
        [k: string]: any;
    };
    class_type?: string | undefined;
};
/** @internal */
export declare const Node$outboundSchema: z.ZodType<Node$Outbound, z.ZodTypeDef, Node>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Node$ {
    /** @deprecated use `Node$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Node, z.ZodTypeDef, unknown>;
    /** @deprecated use `Node$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Node$Outbound, z.ZodTypeDef, Node>;
    /** @deprecated use `Node$Outbound` instead. */
    type Outbound = Node$Outbound;
}
/** @internal */
export declare const One$inboundSchema: z.ZodNativeEnum<typeof One>;
/** @internal */
export declare const One$outboundSchema: z.ZodNativeEnum<typeof One>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Copy: "copy";
        readonly Unzip: "unzip";
        readonly GitClone: "git-clone";
    }>;
    /** @deprecated use `One$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Copy: "copy";
        readonly Unzip: "unzip";
        readonly GitClone: "git-clone";
    }>;
}
/** @internal */
export declare const InstallType$inboundSchema: z.ZodType<InstallType, z.ZodTypeDef, unknown>;
/** @internal */
export type InstallType$Outbound = string | string;
/** @internal */
export declare const InstallType$outboundSchema: z.ZodType<InstallType$Outbound, z.ZodTypeDef, InstallType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InstallType$ {
    /** @deprecated use `InstallType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `InstallType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `InstallType$Outbound` instead. */
    type Outbound = InstallType$Outbound;
}
/** @internal */
export declare const CustomNodes$inboundSchema: z.ZodType<CustomNodes, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomNodes$Outbound = {
    name: string;
    node?: Array<Node$Outbound> | undefined;
    hash?: string | undefined;
    url: string;
    files?: Array<string> | undefined;
    install_type?: string | string | undefined;
    warning?: string | undefined;
    pip?: Array<string> | undefined;
};
/** @internal */
export declare const CustomNodes$outboundSchema: z.ZodType<CustomNodes$Outbound, z.ZodTypeDef, CustomNodes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomNodes$ {
    /** @deprecated use `CustomNodes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomNodes, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomNodes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomNodes$Outbound, z.ZodTypeDef, CustomNodes>;
    /** @deprecated use `CustomNodes$Outbound` instead. */
    type Outbound = CustomNodes$Outbound;
}
/** @internal */
export declare const Models$inboundSchema: z.ZodType<Models, z.ZodTypeDef, unknown>;
/** @internal */
export type Models$Outbound = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};
/** @internal */
export declare const Models$outboundSchema: z.ZodType<Models$Outbound, z.ZodTypeDef, Models>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Models$ {
    /** @deprecated use `Models$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Models, z.ZodTypeDef, unknown>;
    /** @deprecated use `Models$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Models$Outbound, z.ZodTypeDef, Models>;
    /** @deprecated use `Models$Outbound` instead. */
    type Outbound = Models$Outbound;
}
/** @internal */
export declare const Files$inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown>;
/** @internal */
export type Files$Outbound = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};
/** @internal */
export declare const Files$outboundSchema: z.ZodType<Files$Outbound, z.ZodTypeDef, Files>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Files$ {
    /** @deprecated use `Files$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown>;
    /** @deprecated use `Files$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Files$Outbound, z.ZodTypeDef, Files>;
    /** @deprecated use `Files$Outbound` instead. */
    type Outbound = Files$Outbound;
}
/** @internal */
export declare const Dependencies$inboundSchema: z.ZodType<Dependencies, z.ZodTypeDef, unknown>;
/** @internal */
export type Dependencies$Outbound = {
    comfyui: string;
    missing_nodes: Array<string>;
    custom_nodes: {
        [k: string]: CustomNodes$Outbound;
    };
    models: {
        [k: string]: Array<Models$Outbound>;
    };
    files: {
        [k: string]: Array<Files$Outbound>;
    };
};
/** @internal */
export declare const Dependencies$outboundSchema: z.ZodType<Dependencies$Outbound, z.ZodTypeDef, Dependencies>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Dependencies$ {
    /** @deprecated use `Dependencies$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Dependencies, z.ZodTypeDef, unknown>;
    /** @deprecated use `Dependencies$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Dependencies$Outbound, z.ZodTypeDef, Dependencies>;
    /** @deprecated use `Dependencies$Outbound` instead. */
    type Outbound = Dependencies$Outbound;
}
/** @internal */
export declare const PostWorkflowRequestBody$inboundSchema: z.ZodType<PostWorkflowRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PostWorkflowRequestBody$Outbound = {
    workflow_id?: string | undefined;
    workflow_name?: string | undefined;
    workflow?: any | undefined;
    workflow_api: {
        [k: string]: WorkflowApi$Outbound;
    };
    snapshot: Snapshot$Outbound;
    dependencies?: Dependencies$Outbound | undefined;
};
/** @internal */
export declare const PostWorkflowRequestBody$outboundSchema: z.ZodType<PostWorkflowRequestBody$Outbound, z.ZodTypeDef, PostWorkflowRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostWorkflowRequestBody$ {
    /** @deprecated use `PostWorkflowRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostWorkflowRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostWorkflowRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostWorkflowRequestBody$Outbound, z.ZodTypeDef, PostWorkflowRequestBody>;
    /** @deprecated use `PostWorkflowRequestBody$Outbound` instead. */
    type Outbound = PostWorkflowRequestBody$Outbound;
}
/** @internal */
export declare const PostWorkflowResponseBody$inboundSchema: z.ZodType<PostWorkflowResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PostWorkflowResponseBody$Outbound = {
    workflow_id: string;
    version: string;
};
/** @internal */
export declare const PostWorkflowResponseBody$outboundSchema: z.ZodType<PostWorkflowResponseBody$Outbound, z.ZodTypeDef, PostWorkflowResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PostWorkflowResponseBody$ {
    /** @deprecated use `PostWorkflowResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostWorkflowResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostWorkflowResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostWorkflowResponseBody$Outbound, z.ZodTypeDef, PostWorkflowResponseBody>;
    /** @deprecated use `PostWorkflowResponseBody$Outbound` instead. */
    type Outbound = PostWorkflowResponseBody$Outbound;
}
//# sourceMappingURL=postworkflow.d.ts.map