import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
export declare const Type: {
    readonly ImagePng: "image/png";
    readonly ImageJpg: "image/jpg";
    readonly ImageJpeg: "image/jpeg";
    readonly ImageWebp: "image/webp";
    readonly VideoMp4: "video/mp4";
    readonly VideoWebm: "video/webm";
    readonly ApplicationOctetStream: "application/octet-stream";
    readonly ApplicationZip: "application/zip";
};
export type Type = ClosedEnum<typeof Type>;
export type GetUploadUrlRequest = {
    type: Type;
    fileExtension?: string | undefined;
    fileSize: string;
};
/**
 * Retrieve the output
 */
export type GetUploadUrlResponseBody = {
    uploadUrl: string;
    fileId: string;
    downloadUrl: string;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ImagePng: "image/png";
        readonly ImageJpg: "image/jpg";
        readonly ImageJpeg: "image/jpeg";
        readonly ImageWebp: "image/webp";
        readonly VideoMp4: "video/mp4";
        readonly VideoWebm: "video/webm";
        readonly ApplicationOctetStream: "application/octet-stream";
        readonly ApplicationZip: "application/zip";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ImagePng: "image/png";
        readonly ImageJpg: "image/jpg";
        readonly ImageJpeg: "image/jpeg";
        readonly ImageWebp: "image/webp";
        readonly VideoMp4: "video/mp4";
        readonly VideoWebm: "video/webm";
        readonly ApplicationOctetStream: "application/octet-stream";
        readonly ApplicationZip: "application/zip";
    }>;
}
/** @internal */
export declare const GetUploadUrlRequest$inboundSchema: z.ZodType<GetUploadUrlRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetUploadUrlRequest$Outbound = {
    type: string;
    file_extension?: string | undefined;
    file_size: string;
};
/** @internal */
export declare const GetUploadUrlRequest$outboundSchema: z.ZodType<GetUploadUrlRequest$Outbound, z.ZodTypeDef, GetUploadUrlRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUploadUrlRequest$ {
    /** @deprecated use `GetUploadUrlRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUploadUrlRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUploadUrlRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUploadUrlRequest$Outbound, z.ZodTypeDef, GetUploadUrlRequest>;
    /** @deprecated use `GetUploadUrlRequest$Outbound` instead. */
    type Outbound = GetUploadUrlRequest$Outbound;
}
/** @internal */
export declare const GetUploadUrlResponseBody$inboundSchema: z.ZodType<GetUploadUrlResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetUploadUrlResponseBody$Outbound = {
    upload_url: string;
    file_id: string;
    download_url: string;
};
/** @internal */
export declare const GetUploadUrlResponseBody$outboundSchema: z.ZodType<GetUploadUrlResponseBody$Outbound, z.ZodTypeDef, GetUploadUrlResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetUploadUrlResponseBody$ {
    /** @deprecated use `GetUploadUrlResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUploadUrlResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUploadUrlResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUploadUrlResponseBody$Outbound, z.ZodTypeDef, GetUploadUrlResponseBody>;
    /** @deprecated use `GetUploadUrlResponseBody$Outbound` instead. */
    type Outbound = GetUploadUrlResponseBody$Outbound;
}
//# sourceMappingURL=getuploadurl.d.ts.map