"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostWorkflowResponseBody$ = exports.PostWorkflowResponseBody$outboundSchema = exports.PostWorkflowResponseBody$inboundSchema = exports.PostWorkflowRequestBody$ = exports.PostWorkflowRequestBody$outboundSchema = exports.PostWorkflowRequestBody$inboundSchema = exports.Dependencies$ = exports.Dependencies$outboundSchema = exports.Dependencies$inboundSchema = exports.Files$ = exports.Files$outboundSchema = exports.Files$inboundSchema = exports.Models$ = exports.Models$outboundSchema = exports.Models$inboundSchema = exports.CustomNodes$ = exports.CustomNodes$outboundSchema = exports.CustomNodes$inboundSchema = exports.InstallType$ = exports.InstallType$outboundSchema = exports.InstallType$inboundSchema = exports.One$ = exports.One$outboundSchema = exports.One$inboundSchema = exports.Node$ = exports.Node$outboundSchema = exports.Node$inboundSchema = exports.Snapshot$ = exports.Snapshot$outboundSchema = exports.Snapshot$inboundSchema = exports.GitCustomNodes$ = exports.GitCustomNodes$outboundSchema = exports.GitCustomNodes$inboundSchema = exports.WorkflowApi$ = exports.WorkflowApi$outboundSchema = exports.WorkflowApi$inboundSchema = exports.One = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.One = {
    Copy: "copy",
    Unzip: "unzip",
    GitClone: "git-clone",
};
/** @internal */
exports.WorkflowApi$inboundSchema = z.object({
    inputs: z.record(z.any()),
    class_type: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "class_type": "classType",
    });
});
/** @internal */
exports.WorkflowApi$outboundSchema = z.object({
    inputs: z.record(z.any()),
    classType: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        classType: "class_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WorkflowApi$;
(function (WorkflowApi$) {
    /** @deprecated use `WorkflowApi$inboundSchema` instead. */
    WorkflowApi$.inboundSchema = exports.WorkflowApi$inboundSchema;
    /** @deprecated use `WorkflowApi$outboundSchema` instead. */
    WorkflowApi$.outboundSchema = exports.WorkflowApi$outboundSchema;
})(WorkflowApi$ || (exports.WorkflowApi$ = WorkflowApi$ = {}));
/** @internal */
exports.GitCustomNodes$inboundSchema = z.object({
    hash: z.string(),
    disabled: z.boolean(),
});
/** @internal */
exports.GitCustomNodes$outboundSchema = z.object({
    hash: z.string(),
    disabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GitCustomNodes$;
(function (GitCustomNodes$) {
    /** @deprecated use `GitCustomNodes$inboundSchema` instead. */
    GitCustomNodes$.inboundSchema = exports.GitCustomNodes$inboundSchema;
    /** @deprecated use `GitCustomNodes$outboundSchema` instead. */
    GitCustomNodes$.outboundSchema = exports.GitCustomNodes$outboundSchema;
})(GitCustomNodes$ || (exports.GitCustomNodes$ = GitCustomNodes$ = {}));
/** @internal */
exports.Snapshot$inboundSchema = z.object({
    comfyui: z.string(),
    git_custom_nodes: z.record(z.lazy(() => exports.GitCustomNodes$inboundSchema)),
    file_custom_nodes: z.array(z.any()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "git_custom_nodes": "gitCustomNodes",
        "file_custom_nodes": "fileCustomNodes",
    });
});
/** @internal */
exports.Snapshot$outboundSchema = z.object({
    comfyui: z.string(),
    gitCustomNodes: z.record(z.lazy(() => exports.GitCustomNodes$outboundSchema)),
    fileCustomNodes: z.array(z.any()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        gitCustomNodes: "git_custom_nodes",
        fileCustomNodes: "file_custom_nodes",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Snapshot$;
(function (Snapshot$) {
    /** @deprecated use `Snapshot$inboundSchema` instead. */
    Snapshot$.inboundSchema = exports.Snapshot$inboundSchema;
    /** @deprecated use `Snapshot$outboundSchema` instead. */
    Snapshot$.outboundSchema = exports.Snapshot$outboundSchema;
})(Snapshot$ || (exports.Snapshot$ = Snapshot$ = {}));
/** @internal */
exports.Node$inboundSchema = z
    .object({
    inputs: z.record(z.any()),
    class_type: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "class_type": "classType",
    });
});
/** @internal */
exports.Node$outboundSchema = z.object({
    inputs: z.record(z.any()),
    classType: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        classType: "class_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Node$;
(function (Node$) {
    /** @deprecated use `Node$inboundSchema` instead. */
    Node$.inboundSchema = exports.Node$inboundSchema;
    /** @deprecated use `Node$outboundSchema` instead. */
    Node$.outboundSchema = exports.Node$outboundSchema;
})(Node$ || (exports.Node$ = Node$ = {}));
/** @internal */
exports.One$inboundSchema = z.nativeEnum(exports.One);
/** @internal */
exports.One$outboundSchema = exports.One$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var One$;
(function (One$) {
    /** @deprecated use `One$inboundSchema` instead. */
    One$.inboundSchema = exports.One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    One$.outboundSchema = exports.One$outboundSchema;
})(One$ || (exports.One$ = One$ = {}));
/** @internal */
exports.InstallType$inboundSchema = z.union([exports.One$inboundSchema, z.string()]);
/** @internal */
exports.InstallType$outboundSchema = z.union([exports.One$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InstallType$;
(function (InstallType$) {
    /** @deprecated use `InstallType$inboundSchema` instead. */
    InstallType$.inboundSchema = exports.InstallType$inboundSchema;
    /** @deprecated use `InstallType$outboundSchema` instead. */
    InstallType$.outboundSchema = exports.InstallType$outboundSchema;
})(InstallType$ || (exports.InstallType$ = InstallType$ = {}));
/** @internal */
exports.CustomNodes$inboundSchema = z.object({
    name: z.string(),
    node: z.array(z.lazy(() => exports.Node$inboundSchema)).optional(),
    hash: z.string().optional(),
    url: z.string(),
    files: z.array(z.string()).optional(),
    install_type: z.union([exports.One$inboundSchema, z.string()]).optional(),
    warning: z.string().optional(),
    pip: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "install_type": "installType",
    });
});
/** @internal */
exports.CustomNodes$outboundSchema = z.object({
    name: z.string(),
    node: z.array(z.lazy(() => exports.Node$outboundSchema)).optional(),
    hash: z.string().optional(),
    url: z.string(),
    files: z.array(z.string()).optional(),
    installType: z.union([exports.One$outboundSchema, z.string()]).optional(),
    warning: z.string().optional(),
    pip: z.array(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        installType: "install_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomNodes$;
(function (CustomNodes$) {
    /** @deprecated use `CustomNodes$inboundSchema` instead. */
    CustomNodes$.inboundSchema = exports.CustomNodes$inboundSchema;
    /** @deprecated use `CustomNodes$outboundSchema` instead. */
    CustomNodes$.outboundSchema = exports.CustomNodes$outboundSchema;
})(CustomNodes$ || (exports.CustomNodes$ = CustomNodes$ = {}));
/** @internal */
exports.Models$inboundSchema = z
    .object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});
/** @internal */
exports.Models$outboundSchema = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Models$;
(function (Models$) {
    /** @deprecated use `Models$inboundSchema` instead. */
    Models$.inboundSchema = exports.Models$inboundSchema;
    /** @deprecated use `Models$outboundSchema` instead. */
    Models$.outboundSchema = exports.Models$outboundSchema;
})(Models$ || (exports.Models$ = Models$ = {}));
/** @internal */
exports.Files$inboundSchema = z
    .object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});
/** @internal */
exports.Files$outboundSchema = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Files$;
(function (Files$) {
    /** @deprecated use `Files$inboundSchema` instead. */
    Files$.inboundSchema = exports.Files$inboundSchema;
    /** @deprecated use `Files$outboundSchema` instead. */
    Files$.outboundSchema = exports.Files$outboundSchema;
})(Files$ || (exports.Files$ = Files$ = {}));
/** @internal */
exports.Dependencies$inboundSchema = z.object({
    comfyui: z.string(),
    missing_nodes: z.array(z.string()),
    custom_nodes: z.record(z.lazy(() => exports.CustomNodes$inboundSchema)),
    models: z.record(z.array(z.lazy(() => exports.Models$inboundSchema))),
    files: z.record(z.array(z.lazy(() => exports.Files$inboundSchema))),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "missing_nodes": "missingNodes",
        "custom_nodes": "customNodes",
    });
});
/** @internal */
exports.Dependencies$outboundSchema = z.object({
    comfyui: z.string(),
    missingNodes: z.array(z.string()),
    customNodes: z.record(z.lazy(() => exports.CustomNodes$outboundSchema)),
    models: z.record(z.array(z.lazy(() => exports.Models$outboundSchema))),
    files: z.record(z.array(z.lazy(() => exports.Files$outboundSchema))),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        missingNodes: "missing_nodes",
        customNodes: "custom_nodes",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Dependencies$;
(function (Dependencies$) {
    /** @deprecated use `Dependencies$inboundSchema` instead. */
    Dependencies$.inboundSchema = exports.Dependencies$inboundSchema;
    /** @deprecated use `Dependencies$outboundSchema` instead. */
    Dependencies$.outboundSchema = exports.Dependencies$outboundSchema;
})(Dependencies$ || (exports.Dependencies$ = Dependencies$ = {}));
/** @internal */
exports.PostWorkflowRequestBody$inboundSchema = z.object({
    workflow_id: z.string().optional(),
    workflow_name: z.string().optional(),
    workflow: z.any().optional(),
    workflow_api: z.record(z.lazy(() => exports.WorkflowApi$inboundSchema)),
    snapshot: z.lazy(() => exports.Snapshot$inboundSchema),
    dependencies: z.lazy(() => exports.Dependencies$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workflow_id": "workflowId",
        "workflow_name": "workflowName",
        "workflow_api": "workflowApi",
    });
});
/** @internal */
exports.PostWorkflowRequestBody$outboundSchema = z.object({
    workflowId: z.string().optional(),
    workflowName: z.string().optional(),
    workflow: z.any().optional(),
    workflowApi: z.record(z.lazy(() => exports.WorkflowApi$outboundSchema)),
    snapshot: z.lazy(() => exports.Snapshot$outboundSchema),
    dependencies: z.lazy(() => exports.Dependencies$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workflowId: "workflow_id",
        workflowName: "workflow_name",
        workflowApi: "workflow_api",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostWorkflowRequestBody$;
(function (PostWorkflowRequestBody$) {
    /** @deprecated use `PostWorkflowRequestBody$inboundSchema` instead. */
    PostWorkflowRequestBody$.inboundSchema = exports.PostWorkflowRequestBody$inboundSchema;
    /** @deprecated use `PostWorkflowRequestBody$outboundSchema` instead. */
    PostWorkflowRequestBody$.outboundSchema = exports.PostWorkflowRequestBody$outboundSchema;
})(PostWorkflowRequestBody$ || (exports.PostWorkflowRequestBody$ = PostWorkflowRequestBody$ = {}));
/** @internal */
exports.PostWorkflowResponseBody$inboundSchema = z.object({
    workflow_id: z.string(),
    version: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workflow_id": "workflowId",
    });
});
/** @internal */
exports.PostWorkflowResponseBody$outboundSchema = z.object({
    workflowId: z.string(),
    version: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workflowId: "workflow_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostWorkflowResponseBody$;
(function (PostWorkflowResponseBody$) {
    /** @deprecated use `PostWorkflowResponseBody$inboundSchema` instead. */
    PostWorkflowResponseBody$.inboundSchema = exports.PostWorkflowResponseBody$inboundSchema;
    /** @deprecated use `PostWorkflowResponseBody$outboundSchema` instead. */
    PostWorkflowResponseBody$.outboundSchema = exports.PostWorkflowResponseBody$outboundSchema;
})(PostWorkflowResponseBody$ || (exports.PostWorkflowResponseBody$ = PostWorkflowResponseBody$ = {}));
//# sourceMappingURL=postworkflow.js.map