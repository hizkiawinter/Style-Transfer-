"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWorkflowIdResponseBody$ = exports.GetWorkflowIdResponseBody$outboundSchema = exports.GetWorkflowIdResponseBody$inboundSchema = exports.GetWorkflowIdRequest$ = exports.GetWorkflowIdRequest$outboundSchema = exports.GetWorkflowIdRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
/** @internal */
exports.GetWorkflowIdRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
exports.GetWorkflowIdRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetWorkflowIdRequest$;
(function (GetWorkflowIdRequest$) {
    /** @deprecated use `GetWorkflowIdRequest$inboundSchema` instead. */
    GetWorkflowIdRequest$.inboundSchema = exports.GetWorkflowIdRequest$inboundSchema;
    /** @deprecated use `GetWorkflowIdRequest$outboundSchema` instead. */
    GetWorkflowIdRequest$.outboundSchema = exports.GetWorkflowIdRequest$outboundSchema;
})(GetWorkflowIdRequest$ || (exports.GetWorkflowIdRequest$ = GetWorkflowIdRequest$ = {}));
/** @internal */
exports.GetWorkflowIdResponseBody$inboundSchema = z.object({
    workflow_id: z.string(),
    id: z.string(),
    workflow: z.any().optional(),
    workflow_api: z.any().optional(),
    user_id: z.nullable(z.string()),
    comment: z.nullable(z.string()),
    version: z.number(),
    snapshot: z.any().optional(),
    dependencies: z.any().optional(),
    created_at: z.string(),
    updated_at: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workflow_id": "workflowId",
        "workflow_api": "workflowApi",
        "user_id": "userId",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.GetWorkflowIdResponseBody$outboundSchema = z.object({
    workflowId: z.string(),
    id: z.string(),
    workflow: z.any().optional(),
    workflowApi: z.any().optional(),
    userId: z.nullable(z.string()),
    comment: z.nullable(z.string()),
    version: z.number(),
    snapshot: z.any().optional(),
    dependencies: z.any().optional(),
    createdAt: z.string(),
    updatedAt: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workflowId: "workflow_id",
        workflowApi: "workflow_api",
        userId: "user_id",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetWorkflowIdResponseBody$;
(function (GetWorkflowIdResponseBody$) {
    /** @deprecated use `GetWorkflowIdResponseBody$inboundSchema` instead. */
    GetWorkflowIdResponseBody$.inboundSchema = exports.GetWorkflowIdResponseBody$inboundSchema;
    /** @deprecated use `GetWorkflowIdResponseBody$outboundSchema` instead. */
    GetWorkflowIdResponseBody$.outboundSchema = exports.GetWorkflowIdResponseBody$outboundSchema;
})(GetWorkflowIdResponseBody$ || (exports.GetWorkflowIdResponseBody$ = GetWorkflowIdResponseBody$ = {}));
//# sourceMappingURL=getworkflowid.js.map