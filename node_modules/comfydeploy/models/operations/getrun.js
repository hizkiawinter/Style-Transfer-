"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRunResponseBody$ = exports.GetRunResponseBody$outboundSchema = exports.GetRunResponseBody$inboundSchema = exports.Outputs$ = exports.Outputs$outboundSchema = exports.Outputs$inboundSchema = exports.Data$ = exports.Data$outboundSchema = exports.Data$inboundSchema = exports.Gifs$ = exports.Gifs$outboundSchema = exports.Gifs$inboundSchema = exports.GetRunFiles$ = exports.GetRunFiles$outboundSchema = exports.GetRunFiles$inboundSchema = exports.Images$ = exports.Images$outboundSchema = exports.Images$inboundSchema = exports.WebhookStatus$ = exports.WebhookStatus$outboundSchema = exports.WebhookStatus$inboundSchema = exports.RunLog$ = exports.RunLog$outboundSchema = exports.RunLog$inboundSchema = exports.MachineType$ = exports.MachineType$outboundSchema = exports.MachineType$inboundSchema = exports.GetRunGpu$ = exports.GetRunGpu$outboundSchema = exports.GetRunGpu$inboundSchema = exports.GetRunStatus$ = exports.GetRunStatus$outboundSchema = exports.GetRunStatus$inboundSchema = exports.Origin$ = exports.Origin$outboundSchema = exports.Origin$inboundSchema = exports.GetRunWorkflowApi$ = exports.GetRunWorkflowApi$outboundSchema = exports.GetRunWorkflowApi$inboundSchema = exports.WorkflowInputs$ = exports.WorkflowInputs$outboundSchema = exports.WorkflowInputs$inboundSchema = exports.GetRunRequest$ = exports.GetRunRequest$outboundSchema = exports.GetRunRequest$inboundSchema = exports.WebhookStatus = exports.MachineType = exports.GetRunGpu = exports.GetRunStatus = exports.Origin = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.Origin = {
    Manual: "manual",
    Api: "api",
    PublicShare: "public-share",
    PublicTemplate: "public-template",
    Workspace: "workspace",
};
exports.GetRunStatus = {
    NotStarted: "not-started",
    Running: "running",
    Uploading: "uploading",
    Success: "success",
    Failed: "failed",
    Started: "started",
    Queued: "queued",
    Timeout: "timeout",
    Cancelled: "cancelled",
};
exports.GetRunGpu = {
    T4: "T4",
    L4: "L4",
    A10G: "A10G",
    A100: "A100",
    A10080Gb: "A100-80GB",
    H100: "H100",
};
exports.MachineType = {
    Classic: "classic",
    RunpodServerless: "runpod-serverless",
    ModalServerless: "modal-serverless",
    ComfyDeployServerless: "comfy-deploy-serverless",
    Workspace: "workspace",
    WorkspaceV2: "workspace-v2",
};
exports.WebhookStatus = {
    Success: "success",
    Failed: "failed",
    NotStarted: "not-started",
    Running: "running",
};
/** @internal */
exports.GetRunRequest$inboundSchema = z.object({
    run_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "run_id": "runId",
    });
});
/** @internal */
exports.GetRunRequest$outboundSchema = z.object({
    runId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        runId: "run_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunRequest$;
(function (GetRunRequest$) {
    /** @deprecated use `GetRunRequest$inboundSchema` instead. */
    GetRunRequest$.inboundSchema = exports.GetRunRequest$inboundSchema;
    /** @deprecated use `GetRunRequest$outboundSchema` instead. */
    GetRunRequest$.outboundSchema = exports.GetRunRequest$outboundSchema;
})(GetRunRequest$ || (exports.GetRunRequest$ = GetRunRequest$ = {}));
/** @internal */
exports.WorkflowInputs$inboundSchema = z.object({});
/** @internal */
exports.WorkflowInputs$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WorkflowInputs$;
(function (WorkflowInputs$) {
    /** @deprecated use `WorkflowInputs$inboundSchema` instead. */
    WorkflowInputs$.inboundSchema = exports.WorkflowInputs$inboundSchema;
    /** @deprecated use `WorkflowInputs$outboundSchema` instead. */
    WorkflowInputs$.outboundSchema = exports.WorkflowInputs$outboundSchema;
})(WorkflowInputs$ || (exports.WorkflowInputs$ = WorkflowInputs$ = {}));
/** @internal */
exports.GetRunWorkflowApi$inboundSchema = z.object({});
/** @internal */
exports.GetRunWorkflowApi$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunWorkflowApi$;
(function (GetRunWorkflowApi$) {
    /** @deprecated use `GetRunWorkflowApi$inboundSchema` instead. */
    GetRunWorkflowApi$.inboundSchema = exports.GetRunWorkflowApi$inboundSchema;
    /** @deprecated use `GetRunWorkflowApi$outboundSchema` instead. */
    GetRunWorkflowApi$.outboundSchema = exports.GetRunWorkflowApi$outboundSchema;
})(GetRunWorkflowApi$ || (exports.GetRunWorkflowApi$ = GetRunWorkflowApi$ = {}));
/** @internal */
exports.Origin$inboundSchema = z
    .nativeEnum(exports.Origin);
/** @internal */
exports.Origin$outboundSchema = exports.Origin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Origin$;
(function (Origin$) {
    /** @deprecated use `Origin$inboundSchema` instead. */
    Origin$.inboundSchema = exports.Origin$inboundSchema;
    /** @deprecated use `Origin$outboundSchema` instead. */
    Origin$.outboundSchema = exports.Origin$outboundSchema;
})(Origin$ || (exports.Origin$ = Origin$ = {}));
/** @internal */
exports.GetRunStatus$inboundSchema = z.nativeEnum(exports.GetRunStatus);
/** @internal */
exports.GetRunStatus$outboundSchema = exports.GetRunStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunStatus$;
(function (GetRunStatus$) {
    /** @deprecated use `GetRunStatus$inboundSchema` instead. */
    GetRunStatus$.inboundSchema = exports.GetRunStatus$inboundSchema;
    /** @deprecated use `GetRunStatus$outboundSchema` instead. */
    GetRunStatus$.outboundSchema = exports.GetRunStatus$outboundSchema;
})(GetRunStatus$ || (exports.GetRunStatus$ = GetRunStatus$ = {}));
/** @internal */
exports.GetRunGpu$inboundSchema = z
    .nativeEnum(exports.GetRunGpu);
/** @internal */
exports.GetRunGpu$outboundSchema = exports.GetRunGpu$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunGpu$;
(function (GetRunGpu$) {
    /** @deprecated use `GetRunGpu$inboundSchema` instead. */
    GetRunGpu$.inboundSchema = exports.GetRunGpu$inboundSchema;
    /** @deprecated use `GetRunGpu$outboundSchema` instead. */
    GetRunGpu$.outboundSchema = exports.GetRunGpu$outboundSchema;
})(GetRunGpu$ || (exports.GetRunGpu$ = GetRunGpu$ = {}));
/** @internal */
exports.MachineType$inboundSchema = z
    .nativeEnum(exports.MachineType);
/** @internal */
exports.MachineType$outboundSchema = exports.MachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MachineType$;
(function (MachineType$) {
    /** @deprecated use `MachineType$inboundSchema` instead. */
    MachineType$.inboundSchema = exports.MachineType$inboundSchema;
    /** @deprecated use `MachineType$outboundSchema` instead. */
    MachineType$.outboundSchema = exports.MachineType$outboundSchema;
})(MachineType$ || (exports.MachineType$ = MachineType$ = {}));
/** @internal */
exports.RunLog$inboundSchema = z
    .object({});
/** @internal */
exports.RunLog$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RunLog$;
(function (RunLog$) {
    /** @deprecated use `RunLog$inboundSchema` instead. */
    RunLog$.inboundSchema = exports.RunLog$inboundSchema;
    /** @deprecated use `RunLog$outboundSchema` instead. */
    RunLog$.outboundSchema = exports.RunLog$outboundSchema;
})(RunLog$ || (exports.RunLog$ = RunLog$ = {}));
/** @internal */
exports.WebhookStatus$inboundSchema = z.nativeEnum(exports.WebhookStatus);
/** @internal */
exports.WebhookStatus$outboundSchema = exports.WebhookStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WebhookStatus$;
(function (WebhookStatus$) {
    /** @deprecated use `WebhookStatus$inboundSchema` instead. */
    WebhookStatus$.inboundSchema = exports.WebhookStatus$inboundSchema;
    /** @deprecated use `WebhookStatus$outboundSchema` instead. */
    WebhookStatus$.outboundSchema = exports.WebhookStatus$outboundSchema;
})(WebhookStatus$ || (exports.WebhookStatus$ = WebhookStatus$ = {}));
/** @internal */
exports.Images$inboundSchema = z
    .object({
    url: z.string(),
    filename: z.string(),
});
/** @internal */
exports.Images$outboundSchema = z.object({
    url: z.string(),
    filename: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Images$;
(function (Images$) {
    /** @deprecated use `Images$inboundSchema` instead. */
    Images$.inboundSchema = exports.Images$inboundSchema;
    /** @deprecated use `Images$outboundSchema` instead. */
    Images$.outboundSchema = exports.Images$outboundSchema;
})(Images$ || (exports.Images$ = Images$ = {}));
/** @internal */
exports.GetRunFiles$inboundSchema = z.object({
    url: z.string(),
    filename: z.string(),
});
/** @internal */
exports.GetRunFiles$outboundSchema = z.object({
    url: z.string(),
    filename: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunFiles$;
(function (GetRunFiles$) {
    /** @deprecated use `GetRunFiles$inboundSchema` instead. */
    GetRunFiles$.inboundSchema = exports.GetRunFiles$inboundSchema;
    /** @deprecated use `GetRunFiles$outboundSchema` instead. */
    GetRunFiles$.outboundSchema = exports.GetRunFiles$outboundSchema;
})(GetRunFiles$ || (exports.GetRunFiles$ = GetRunFiles$ = {}));
/** @internal */
exports.Gifs$inboundSchema = z
    .object({
    url: z.string(),
    filename: z.string(),
});
/** @internal */
exports.Gifs$outboundSchema = z.object({
    url: z.string(),
    filename: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Gifs$;
(function (Gifs$) {
    /** @deprecated use `Gifs$inboundSchema` instead. */
    Gifs$.inboundSchema = exports.Gifs$inboundSchema;
    /** @deprecated use `Gifs$outboundSchema` instead. */
    Gifs$.outboundSchema = exports.Gifs$outboundSchema;
})(Gifs$ || (exports.Gifs$ = Gifs$ = {}));
/** @internal */
exports.Data$inboundSchema = z
    .object({
    images: z.array(z.lazy(() => exports.Images$inboundSchema)).optional(),
    files: z.array(z.lazy(() => exports.GetRunFiles$inboundSchema)).optional(),
    gifs: z.array(z.lazy(() => exports.Gifs$inboundSchema)).optional(),
    text: z.array(z.string()).optional(),
});
/** @internal */
exports.Data$outboundSchema = z.object({
    images: z.array(z.lazy(() => exports.Images$outboundSchema)).optional(),
    files: z.array(z.lazy(() => exports.GetRunFiles$outboundSchema)).optional(),
    gifs: z.array(z.lazy(() => exports.Gifs$outboundSchema)).optional(),
    text: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Data$;
(function (Data$) {
    /** @deprecated use `Data$inboundSchema` instead. */
    Data$.inboundSchema = exports.Data$inboundSchema;
    /** @deprecated use `Data$outboundSchema` instead. */
    Data$.outboundSchema = exports.Data$outboundSchema;
})(Data$ || (exports.Data$ = Data$ = {}));
/** @internal */
exports.Outputs$inboundSchema = z.object({
    data: z.lazy(() => exports.Data$inboundSchema),
});
/** @internal */
exports.Outputs$outboundSchema = z.object({
    data: z.lazy(() => exports.Data$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Outputs$;
(function (Outputs$) {
    /** @deprecated use `Outputs$inboundSchema` instead. */
    Outputs$.inboundSchema = exports.Outputs$inboundSchema;
    /** @deprecated use `Outputs$outboundSchema` instead. */
    Outputs$.outboundSchema = exports.Outputs$outboundSchema;
})(Outputs$ || (exports.Outputs$ = Outputs$ = {}));
/** @internal */
exports.GetRunResponseBody$inboundSchema = z.object({
    id: z.string(),
    workflow_version_id: z.nullable(z.string()),
    workflow_inputs: z.nullable(z.lazy(() => exports.WorkflowInputs$inboundSchema)),
    workflow_id: z.nullable(z.string()),
    workflow_api: z.nullable(z.lazy(() => exports.GetRunWorkflowApi$inboundSchema))
        .optional(),
    machine_id: z.nullable(z.string()),
    origin: exports.Origin$inboundSchema,
    status: exports.GetRunStatus$inboundSchema,
    ended_at: z.nullable(z.string()),
    created_at: z.string(),
    updated_at: z.string(),
    queued_at: z.nullable(z.string()),
    started_at: z.nullable(z.string()),
    gpu_event_id: z.nullable(z.string()),
    gpu: z.nullable(exports.GetRunGpu$inboundSchema),
    machine_version: z.nullable(z.string()),
    machine_type: z.nullable(exports.MachineType$inboundSchema),
    modal_function_call_id: z.nullable(z.string()),
    user_id: z.nullable(z.string()),
    org_id: z.nullable(z.string()),
    run_log: z.lazy(() => exports.RunLog$inboundSchema).optional(),
    live_status: z.nullable(z.string()),
    progress: z.number(),
    is_realtime: z.boolean(),
    webhook: z.nullable(z.string()),
    webhook_status: z.nullable(exports.WebhookStatus$inboundSchema),
    webhook_intermediate_status: z.boolean(),
    batch_id: z.nullable(z.string()),
    favorite: z.boolean(),
    outputs: z.nullable(z.array(z.lazy(() => exports.Outputs$inboundSchema))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workflow_version_id": "workflowVersionId",
        "workflow_inputs": "workflowInputs",
        "workflow_id": "workflowId",
        "workflow_api": "workflowApi",
        "machine_id": "machineId",
        "ended_at": "endedAt",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
        "queued_at": "queuedAt",
        "started_at": "startedAt",
        "gpu_event_id": "gpuEventId",
        "machine_version": "machineVersion",
        "machine_type": "machineType",
        "modal_function_call_id": "modalFunctionCallId",
        "user_id": "userId",
        "org_id": "orgId",
        "run_log": "runLog",
        "live_status": "liveStatus",
        "is_realtime": "isRealtime",
        "webhook_status": "webhookStatus",
        "webhook_intermediate_status": "webhookIntermediateStatus",
        "batch_id": "batchId",
    });
});
/** @internal */
exports.GetRunResponseBody$outboundSchema = z.object({
    id: z.string(),
    workflowVersionId: z.nullable(z.string()),
    workflowInputs: z.nullable(z.lazy(() => exports.WorkflowInputs$outboundSchema)),
    workflowId: z.nullable(z.string()),
    workflowApi: z.nullable(z.lazy(() => exports.GetRunWorkflowApi$outboundSchema))
        .optional(),
    machineId: z.nullable(z.string()),
    origin: exports.Origin$outboundSchema,
    status: exports.GetRunStatus$outboundSchema,
    endedAt: z.nullable(z.string()),
    createdAt: z.string(),
    updatedAt: z.string(),
    queuedAt: z.nullable(z.string()),
    startedAt: z.nullable(z.string()),
    gpuEventId: z.nullable(z.string()),
    gpu: z.nullable(exports.GetRunGpu$outboundSchema),
    machineVersion: z.nullable(z.string()),
    machineType: z.nullable(exports.MachineType$outboundSchema),
    modalFunctionCallId: z.nullable(z.string()),
    userId: z.nullable(z.string()),
    orgId: z.nullable(z.string()),
    runLog: z.lazy(() => exports.RunLog$outboundSchema).optional(),
    liveStatus: z.nullable(z.string()),
    progress: z.number(),
    isRealtime: z.boolean(),
    webhook: z.nullable(z.string()),
    webhookStatus: z.nullable(exports.WebhookStatus$outboundSchema),
    webhookIntermediateStatus: z.boolean(),
    batchId: z.nullable(z.string()),
    favorite: z.boolean(),
    outputs: z.nullable(z.array(z.lazy(() => exports.Outputs$outboundSchema))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workflowVersionId: "workflow_version_id",
        workflowInputs: "workflow_inputs",
        workflowId: "workflow_id",
        workflowApi: "workflow_api",
        machineId: "machine_id",
        endedAt: "ended_at",
        createdAt: "created_at",
        updatedAt: "updated_at",
        queuedAt: "queued_at",
        startedAt: "started_at",
        gpuEventId: "gpu_event_id",
        machineVersion: "machine_version",
        machineType: "machine_type",
        modalFunctionCallId: "modal_function_call_id",
        userId: "user_id",
        orgId: "org_id",
        runLog: "run_log",
        liveStatus: "live_status",
        isRealtime: "is_realtime",
        webhookStatus: "webhook_status",
        webhookIntermediateStatus: "webhook_intermediate_status",
        batchId: "batch_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetRunResponseBody$;
(function (GetRunResponseBody$) {
    /** @deprecated use `GetRunResponseBody$inboundSchema` instead. */
    GetRunResponseBody$.inboundSchema = exports.GetRunResponseBody$inboundSchema;
    /** @deprecated use `GetRunResponseBody$outboundSchema` instead. */
    GetRunResponseBody$.outboundSchema = exports.GetRunResponseBody$outboundSchema;
})(GetRunResponseBody$ || (exports.GetRunResponseBody$ = GetRunResponseBody$ = {}));
//# sourceMappingURL=getrun.js.map