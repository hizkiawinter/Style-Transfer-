"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostV1MachinesResponseBody$ = exports.PostV1MachinesResponseBody$outboundSchema = exports.PostV1MachinesResponseBody$inboundSchema = exports.PostV1MachinesGpu$ = exports.PostV1MachinesGpu$outboundSchema = exports.PostV1MachinesGpu$inboundSchema = exports.PostV1MachinesStatus$ = exports.PostV1MachinesStatus$outboundSchema = exports.PostV1MachinesStatus$inboundSchema = exports.PostV1MachinesType$ = exports.PostV1MachinesType$outboundSchema = exports.PostV1MachinesType$inboundSchema = exports.PostV1MachinesRequestBody$ = exports.PostV1MachinesRequestBody$outboundSchema = exports.PostV1MachinesRequestBody$inboundSchema = exports.PostV1MachinesGpu = exports.PostV1MachinesStatus = exports.PostV1MachinesType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.PostV1MachinesType = {
    ComfyDeployServerless: "comfy-deploy-serverless",
};
exports.PostV1MachinesStatus = {
    Building: "building",
};
exports.PostV1MachinesGpu = {
    A10G: "A10G",
};
/** @internal */
exports.PostV1MachinesRequestBody$inboundSchema = z.object({
    default_machine: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "default_machine": "defaultMachine",
    });
});
/** @internal */
exports.PostV1MachinesRequestBody$outboundSchema = z.object({
    defaultMachine: z.boolean().default(true),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        defaultMachine: "default_machine",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostV1MachinesRequestBody$;
(function (PostV1MachinesRequestBody$) {
    /** @deprecated use `PostV1MachinesRequestBody$inboundSchema` instead. */
    PostV1MachinesRequestBody$.inboundSchema = exports.PostV1MachinesRequestBody$inboundSchema;
    /** @deprecated use `PostV1MachinesRequestBody$outboundSchema` instead. */
    PostV1MachinesRequestBody$.outboundSchema = exports.PostV1MachinesRequestBody$outboundSchema;
})(PostV1MachinesRequestBody$ || (exports.PostV1MachinesRequestBody$ = PostV1MachinesRequestBody$ = {}));
/** @internal */
exports.PostV1MachinesType$inboundSchema = z.nativeEnum(exports.PostV1MachinesType);
/** @internal */
exports.PostV1MachinesType$outboundSchema = exports.PostV1MachinesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostV1MachinesType$;
(function (PostV1MachinesType$) {
    /** @deprecated use `PostV1MachinesType$inboundSchema` instead. */
    PostV1MachinesType$.inboundSchema = exports.PostV1MachinesType$inboundSchema;
    /** @deprecated use `PostV1MachinesType$outboundSchema` instead. */
    PostV1MachinesType$.outboundSchema = exports.PostV1MachinesType$outboundSchema;
})(PostV1MachinesType$ || (exports.PostV1MachinesType$ = PostV1MachinesType$ = {}));
/** @internal */
exports.PostV1MachinesStatus$inboundSchema = z.nativeEnum(exports.PostV1MachinesStatus);
/** @internal */
exports.PostV1MachinesStatus$outboundSchema = exports.PostV1MachinesStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostV1MachinesStatus$;
(function (PostV1MachinesStatus$) {
    /** @deprecated use `PostV1MachinesStatus$inboundSchema` instead. */
    PostV1MachinesStatus$.inboundSchema = exports.PostV1MachinesStatus$inboundSchema;
    /** @deprecated use `PostV1MachinesStatus$outboundSchema` instead. */
    PostV1MachinesStatus$.outboundSchema = exports.PostV1MachinesStatus$outboundSchema;
})(PostV1MachinesStatus$ || (exports.PostV1MachinesStatus$ = PostV1MachinesStatus$ = {}));
/** @internal */
exports.PostV1MachinesGpu$inboundSchema = z.nativeEnum(exports.PostV1MachinesGpu);
/** @internal */
exports.PostV1MachinesGpu$outboundSchema = exports.PostV1MachinesGpu$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostV1MachinesGpu$;
(function (PostV1MachinesGpu$) {
    /** @deprecated use `PostV1MachinesGpu$inboundSchema` instead. */
    PostV1MachinesGpu$.inboundSchema = exports.PostV1MachinesGpu$inboundSchema;
    /** @deprecated use `PostV1MachinesGpu$outboundSchema` instead. */
    PostV1MachinesGpu$.outboundSchema = exports.PostV1MachinesGpu$outboundSchema;
})(PostV1MachinesGpu$ || (exports.PostV1MachinesGpu$ = PostV1MachinesGpu$ = {}));
/** @internal */
exports.PostV1MachinesResponseBody$inboundSchema = z.object({
    id: z.string(),
    user_id: z.string(),
    name: z.string(),
    org_id: z.nullable(z.string()),
    endpoint: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    disabled: z.boolean(),
    type: exports.PostV1MachinesType$inboundSchema,
    status: exports.PostV1MachinesStatus$inboundSchema,
    machine_version: z.nullable(z.string()),
    machine_builder_version: z.string(),
    snapshot: z.any().optional(),
    models: z.array(z.any()),
    gpu: exports.PostV1MachinesGpu$inboundSchema,
    ws_gpu: z.any().optional(),
    pod_id: z.nullable(z.string()),
    base_docker_image: z.nullable(z.string()),
    allow_concurrent_inputs: z.number(),
    concurrency_limit: z.number(),
    legacy_mode: z.boolean(),
    ws_timeout: z.number(),
    run_timeout: z.number(),
    idle_timeout: z.number(),
    build_machine_instance_id: z.nullable(z.string()),
    build_log: z.nullable(z.string()),
    modal_app_id: z.nullable(z.string()),
    object_info: z.any().optional(),
    target_workflow_id: z.nullable(z.string()),
    dependencies: z.any().optional(),
    extra_docker_commands: z.any().optional(),
    install_custom_node_with_gpu: z.boolean(),
    deleted: z.boolean(),
    keep_warm: z.number(),
    allow_background_volume_commits: z.boolean(),
    gpu_workspace: z.boolean(),
    docker_command_steps: z.any().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "user_id": "userId",
        "org_id": "orgId",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
        "machine_version": "machineVersion",
        "machine_builder_version": "machineBuilderVersion",
        "ws_gpu": "wsGpu",
        "pod_id": "podId",
        "base_docker_image": "baseDockerImage",
        "allow_concurrent_inputs": "allowConcurrentInputs",
        "concurrency_limit": "concurrencyLimit",
        "legacy_mode": "legacyMode",
        "ws_timeout": "wsTimeout",
        "run_timeout": "runTimeout",
        "idle_timeout": "idleTimeout",
        "build_machine_instance_id": "buildMachineInstanceId",
        "build_log": "buildLog",
        "modal_app_id": "modalAppId",
        "object_info": "objectInfo",
        "target_workflow_id": "targetWorkflowId",
        "extra_docker_commands": "extraDockerCommands",
        "install_custom_node_with_gpu": "installCustomNodeWithGpu",
        "keep_warm": "keepWarm",
        "allow_background_volume_commits": "allowBackgroundVolumeCommits",
        "gpu_workspace": "gpuWorkspace",
        "docker_command_steps": "dockerCommandSteps",
    });
});
/** @internal */
exports.PostV1MachinesResponseBody$outboundSchema = z.object({
    id: z.string(),
    userId: z.string(),
    name: z.string(),
    orgId: z.nullable(z.string()),
    endpoint: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    disabled: z.boolean(),
    type: exports.PostV1MachinesType$outboundSchema,
    status: exports.PostV1MachinesStatus$outboundSchema,
    machineVersion: z.nullable(z.string()),
    machineBuilderVersion: z.string(),
    snapshot: z.any().optional(),
    models: z.array(z.any()),
    gpu: exports.PostV1MachinesGpu$outboundSchema,
    wsGpu: z.any().optional(),
    podId: z.nullable(z.string()),
    baseDockerImage: z.nullable(z.string()),
    allowConcurrentInputs: z.number(),
    concurrencyLimit: z.number(),
    legacyMode: z.boolean(),
    wsTimeout: z.number(),
    runTimeout: z.number(),
    idleTimeout: z.number(),
    buildMachineInstanceId: z.nullable(z.string()),
    buildLog: z.nullable(z.string()),
    modalAppId: z.nullable(z.string()),
    objectInfo: z.any().optional(),
    targetWorkflowId: z.nullable(z.string()),
    dependencies: z.any().optional(),
    extraDockerCommands: z.any().optional(),
    installCustomNodeWithGpu: z.boolean(),
    deleted: z.boolean(),
    keepWarm: z.number(),
    allowBackgroundVolumeCommits: z.boolean(),
    gpuWorkspace: z.boolean(),
    dockerCommandSteps: z.any().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        userId: "user_id",
        orgId: "org_id",
        createdAt: "created_at",
        updatedAt: "updated_at",
        machineVersion: "machine_version",
        machineBuilderVersion: "machine_builder_version",
        wsGpu: "ws_gpu",
        podId: "pod_id",
        baseDockerImage: "base_docker_image",
        allowConcurrentInputs: "allow_concurrent_inputs",
        concurrencyLimit: "concurrency_limit",
        legacyMode: "legacy_mode",
        wsTimeout: "ws_timeout",
        runTimeout: "run_timeout",
        idleTimeout: "idle_timeout",
        buildMachineInstanceId: "build_machine_instance_id",
        buildLog: "build_log",
        modalAppId: "modal_app_id",
        objectInfo: "object_info",
        targetWorkflowId: "target_workflow_id",
        extraDockerCommands: "extra_docker_commands",
        installCustomNodeWithGpu: "install_custom_node_with_gpu",
        keepWarm: "keep_warm",
        allowBackgroundVolumeCommits: "allow_background_volume_commits",
        gpuWorkspace: "gpu_workspace",
        dockerCommandSteps: "docker_command_steps",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostV1MachinesResponseBody$;
(function (PostV1MachinesResponseBody$) {
    /** @deprecated use `PostV1MachinesResponseBody$inboundSchema` instead. */
    PostV1MachinesResponseBody$.inboundSchema = exports.PostV1MachinesResponseBody$inboundSchema;
    /** @deprecated use `PostV1MachinesResponseBody$outboundSchema` instead. */
    PostV1MachinesResponseBody$.outboundSchema = exports.PostV1MachinesResponseBody$outboundSchema;
})(PostV1MachinesResponseBody$ || (exports.PostV1MachinesResponseBody$ = PostV1MachinesResponseBody$ = {}));
//# sourceMappingURL=postv1machines.js.map