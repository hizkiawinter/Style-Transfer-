"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentRunRequest$ = exports.DeploymentRunRequest$outboundSchema = exports.DeploymentRunRequest$inboundSchema = exports.DeploymentRunRequestInputs$ = exports.DeploymentRunRequestInputs$outboundSchema = exports.DeploymentRunRequestInputs$inboundSchema = exports.DeploymentRunRequestExecutionMode$ = exports.DeploymentRunRequestExecutionMode$outboundSchema = exports.DeploymentRunRequestExecutionMode$inboundSchema = exports.DeploymentRunRequestExecutionMode = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.DeploymentRunRequestExecutionMode = {
    Async: "async",
    Sync: "sync",
    SyncFirstResult: "sync_first_result",
    Stream: "stream",
};
/** @internal */
exports.DeploymentRunRequestExecutionMode$inboundSchema = z.nativeEnum(exports.DeploymentRunRequestExecutionMode);
/** @internal */
exports.DeploymentRunRequestExecutionMode$outboundSchema = exports.DeploymentRunRequestExecutionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeploymentRunRequestExecutionMode$;
(function (DeploymentRunRequestExecutionMode$) {
    /** @deprecated use `DeploymentRunRequestExecutionMode$inboundSchema` instead. */
    DeploymentRunRequestExecutionMode$.inboundSchema = exports.DeploymentRunRequestExecutionMode$inboundSchema;
    /** @deprecated use `DeploymentRunRequestExecutionMode$outboundSchema` instead. */
    DeploymentRunRequestExecutionMode$.outboundSchema = exports.DeploymentRunRequestExecutionMode$outboundSchema;
})(DeploymentRunRequestExecutionMode$ || (exports.DeploymentRunRequestExecutionMode$ = DeploymentRunRequestExecutionMode$ = {}));
/** @internal */
exports.DeploymentRunRequestInputs$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);
/** @internal */
exports.DeploymentRunRequestInputs$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeploymentRunRequestInputs$;
(function (DeploymentRunRequestInputs$) {
    /** @deprecated use `DeploymentRunRequestInputs$inboundSchema` instead. */
    DeploymentRunRequestInputs$.inboundSchema = exports.DeploymentRunRequestInputs$inboundSchema;
    /** @deprecated use `DeploymentRunRequestInputs$outboundSchema` instead. */
    DeploymentRunRequestInputs$.outboundSchema = exports.DeploymentRunRequestInputs$outboundSchema;
})(DeploymentRunRequestInputs$ || (exports.DeploymentRunRequestInputs$ = DeploymentRunRequestInputs$ = {}));
/** @internal */
exports.DeploymentRunRequest$inboundSchema = z.object({
    execution_mode: z.nullable(exports.DeploymentRunRequestExecutionMode$inboundSchema)
        .optional(),
    inputs: z.nullable(z.record(z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
    ]))).optional(),
    webhook: z.nullable(z.string()).optional(),
    webhook_intermediate_status: z.nullable(z.boolean()).optional(),
    origin: z.nullable(z.string()).optional(),
    batch_number: z.nullable(z.number().int()).optional(),
    batch_input_params: z.nullable(z.record(z.array(z.any()))).optional(),
    is_native_run: z.nullable(z.boolean()).optional(),
    gpu_event_id: z.nullable(z.string()).optional(),
    deployment_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "execution_mode": "executionMode",
        "webhook_intermediate_status": "webhookIntermediateStatus",
        "batch_number": "batchNumber",
        "batch_input_params": "batchInputParams",
        "is_native_run": "isNativeRun",
        "gpu_event_id": "gpuEventId",
        "deployment_id": "deploymentId",
    });
});
/** @internal */
exports.DeploymentRunRequest$outboundSchema = z.object({
    executionMode: z.nullable(exports.DeploymentRunRequestExecutionMode$outboundSchema)
        .optional(),
    inputs: z.nullable(z.record(z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
    ]))).optional(),
    webhook: z.nullable(z.string()).optional(),
    webhookIntermediateStatus: z.nullable(z.boolean()).optional(),
    origin: z.nullable(z.string()).optional(),
    batchNumber: z.nullable(z.number().int()).optional(),
    batchInputParams: z.nullable(z.record(z.array(z.any()))).optional(),
    isNativeRun: z.nullable(z.boolean()).optional(),
    gpuEventId: z.nullable(z.string()).optional(),
    deploymentId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        executionMode: "execution_mode",
        webhookIntermediateStatus: "webhook_intermediate_status",
        batchNumber: "batch_number",
        batchInputParams: "batch_input_params",
        isNativeRun: "is_native_run",
        gpuEventId: "gpu_event_id",
        deploymentId: "deployment_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DeploymentRunRequest$;
(function (DeploymentRunRequest$) {
    /** @deprecated use `DeploymentRunRequest$inboundSchema` instead. */
    DeploymentRunRequest$.inboundSchema = exports.DeploymentRunRequest$inboundSchema;
    /** @deprecated use `DeploymentRunRequest$outboundSchema` instead. */
    DeploymentRunRequest$.outboundSchema = exports.DeploymentRunRequest$outboundSchema;
})(DeploymentRunRequest$ || (exports.DeploymentRunRequest$ = DeploymentRunRequest$ = {}));
//# sourceMappingURL=deploymentrunrequest.js.map