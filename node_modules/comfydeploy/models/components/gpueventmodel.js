"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GPUEventModel$ = exports.GPUEventModel$outboundSchema = exports.GPUEventModel$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const gpuprovidertype_js_1 = require("./gpuprovidertype.js");
const machinegpu_js_1 = require("./machinegpu.js");
/** @internal */
exports.GPUEventModel$inboundSchema = z.object({
    id: z.string(),
    user_id: z.string(),
    org_id: z.nullable(z.string()),
    machine_id: z.nullable(z.string()),
    start_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    end_time: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    gpu: z.nullable(machinegpu_js_1.MachineGPU$inboundSchema),
    ws_gpu: z.nullable(z.literal("4090")).optional(),
    gpu_provider: gpuprovidertype_js_1.GPUProviderType$inboundSchema,
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    session_timeout: z.nullable(z.number().int()).optional(),
    session_id: z.nullable(z.string()).optional(),
    modal_function_id: z.nullable(z.string()).optional(),
    tunnel_url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "user_id": "userId",
        "org_id": "orgId",
        "machine_id": "machineId",
        "start_time": "startTime",
        "end_time": "endTime",
        "ws_gpu": "wsGpu",
        "gpu_provider": "gpuProvider",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
        "session_timeout": "sessionTimeout",
        "session_id": "sessionId",
        "modal_function_id": "modalFunctionId",
        "tunnel_url": "tunnelUrl",
    });
});
/** @internal */
exports.GPUEventModel$outboundSchema = z.object({
    id: z.string(),
    userId: z.string(),
    orgId: z.nullable(z.string()),
    machineId: z.nullable(z.string()),
    startTime: z.nullable(z.date().transform(v => v.toISOString())),
    endTime: z.nullable(z.date().transform(v => v.toISOString())),
    gpu: z.nullable(machinegpu_js_1.MachineGPU$outboundSchema),
    wsGpu: z.nullable(z.literal("4090").default("4090")),
    gpuProvider: gpuprovidertype_js_1.GPUProviderType$outboundSchema,
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    sessionTimeout: z.nullable(z.number().int()).optional(),
    sessionId: z.nullable(z.string()).optional(),
    modalFunctionId: z.nullable(z.string()).optional(),
    tunnelUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        userId: "user_id",
        orgId: "org_id",
        machineId: "machine_id",
        startTime: "start_time",
        endTime: "end_time",
        wsGpu: "ws_gpu",
        gpuProvider: "gpu_provider",
        createdAt: "created_at",
        updatedAt: "updated_at",
        sessionTimeout: "session_timeout",
        sessionId: "session_id",
        modalFunctionId: "modal_function_id",
        tunnelUrl: "tunnel_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GPUEventModel$;
(function (GPUEventModel$) {
    /** @deprecated use `GPUEventModel$inboundSchema` instead. */
    GPUEventModel$.inboundSchema = exports.GPUEventModel$inboundSchema;
    /** @deprecated use `GPUEventModel$outboundSchema` instead. */
    GPUEventModel$.outboundSchema = exports.GPUEventModel$outboundSchema;
})(GPUEventModel$ || (exports.GPUEventModel$ = GPUEventModel$ = {}));
//# sourceMappingURL=gpueventmodel.js.map