"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowRunVersionRequest$ = exports.WorkflowRunVersionRequest$outboundSchema = exports.WorkflowRunVersionRequest$inboundSchema = exports.Inputs$ = exports.Inputs$outboundSchema = exports.Inputs$inboundSchema = exports.ExecutionMode$ = exports.ExecutionMode$outboundSchema = exports.ExecutionMode$inboundSchema = exports.ExecutionMode = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.ExecutionMode = {
    Async: "async",
    Sync: "sync",
    SyncFirstResult: "sync_first_result",
    Stream: "stream",
};
/** @internal */
exports.ExecutionMode$inboundSchema = z.nativeEnum(exports.ExecutionMode);
/** @internal */
exports.ExecutionMode$outboundSchema = exports.ExecutionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExecutionMode$;
(function (ExecutionMode$) {
    /** @deprecated use `ExecutionMode$inboundSchema` instead. */
    ExecutionMode$.inboundSchema = exports.ExecutionMode$inboundSchema;
    /** @deprecated use `ExecutionMode$outboundSchema` instead. */
    ExecutionMode$.outboundSchema = exports.ExecutionMode$outboundSchema;
})(ExecutionMode$ || (exports.ExecutionMode$ = ExecutionMode$ = {}));
/** @internal */
exports.Inputs$inboundSchema = z
    .union([
    z.string(),
    z.number().int(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);
/** @internal */
exports.Inputs$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.number(),
    z.boolean(),
    z.array(z.any()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Inputs$;
(function (Inputs$) {
    /** @deprecated use `Inputs$inboundSchema` instead. */
    Inputs$.inboundSchema = exports.Inputs$inboundSchema;
    /** @deprecated use `Inputs$outboundSchema` instead. */
    Inputs$.outboundSchema = exports.Inputs$outboundSchema;
})(Inputs$ || (exports.Inputs$ = Inputs$ = {}));
/** @internal */
exports.WorkflowRunVersionRequest$inboundSchema = z.object({
    execution_mode: z.nullable(exports.ExecutionMode$inboundSchema).optional(),
    inputs: z.nullable(z.record(z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
    ]))).optional(),
    webhook: z.nullable(z.string()).optional(),
    webhook_intermediate_status: z.nullable(z.boolean()).optional(),
    origin: z.nullable(z.string()).optional(),
    batch_number: z.nullable(z.number().int()).optional(),
    batch_input_params: z.nullable(z.record(z.array(z.any()))).optional(),
    is_native_run: z.nullable(z.boolean()).optional(),
    gpu_event_id: z.nullable(z.string()).optional(),
    workflow_version_id: z.string(),
    machine_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "execution_mode": "executionMode",
        "webhook_intermediate_status": "webhookIntermediateStatus",
        "batch_number": "batchNumber",
        "batch_input_params": "batchInputParams",
        "is_native_run": "isNativeRun",
        "gpu_event_id": "gpuEventId",
        "workflow_version_id": "workflowVersionId",
        "machine_id": "machineId",
    });
});
/** @internal */
exports.WorkflowRunVersionRequest$outboundSchema = z.object({
    executionMode: z.nullable(exports.ExecutionMode$outboundSchema).optional(),
    inputs: z.nullable(z.record(z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.any()),
    ]))).optional(),
    webhook: z.nullable(z.string()).optional(),
    webhookIntermediateStatus: z.nullable(z.boolean()).optional(),
    origin: z.nullable(z.string()).optional(),
    batchNumber: z.nullable(z.number().int()).optional(),
    batchInputParams: z.nullable(z.record(z.array(z.any()))).optional(),
    isNativeRun: z.nullable(z.boolean()).optional(),
    gpuEventId: z.nullable(z.string()).optional(),
    workflowVersionId: z.string(),
    machineId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        executionMode: "execution_mode",
        webhookIntermediateStatus: "webhook_intermediate_status",
        batchNumber: "batch_number",
        batchInputParams: "batch_input_params",
        isNativeRun: "is_native_run",
        gpuEventId: "gpu_event_id",
        workflowVersionId: "workflow_version_id",
        machineId: "machine_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WorkflowRunVersionRequest$;
(function (WorkflowRunVersionRequest$) {
    /** @deprecated use `WorkflowRunVersionRequest$inboundSchema` instead. */
    WorkflowRunVersionRequest$.inboundSchema = exports.WorkflowRunVersionRequest$inboundSchema;
    /** @deprecated use `WorkflowRunVersionRequest$outboundSchema` instead. */
    WorkflowRunVersionRequest$.outboundSchema = exports.WorkflowRunVersionRequest$outboundSchema;
})(WorkflowRunVersionRequest$ || (exports.WorkflowRunVersionRequest$ = WorkflowRunVersionRequest$ = {}));
//# sourceMappingURL=workflowrunversionrequest.js.map