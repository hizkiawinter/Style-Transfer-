"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventUpdateEvent$ = exports.EventUpdateEvent$outboundSchema = exports.EventUpdateEvent$inboundSchema = exports.EventUpdateEventEvent$ = exports.EventUpdateEventEvent$outboundSchema = exports.EventUpdateEventEvent$inboundSchema = exports.EventUpdateEventEvent = void 0;
const z = __importStar(require("zod"));
const eventupdate_js_1 = require("./eventupdate.js");
exports.EventUpdateEventEvent = {
    EventUpdate: "event_update",
};
/** @internal */
exports.EventUpdateEventEvent$inboundSchema = z.nativeEnum(exports.EventUpdateEventEvent);
/** @internal */
exports.EventUpdateEventEvent$outboundSchema = exports.EventUpdateEventEvent$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventUpdateEventEvent$;
(function (EventUpdateEventEvent$) {
    /** @deprecated use `EventUpdateEventEvent$inboundSchema` instead. */
    EventUpdateEventEvent$.inboundSchema = exports.EventUpdateEventEvent$inboundSchema;
    /** @deprecated use `EventUpdateEventEvent$outboundSchema` instead. */
    EventUpdateEventEvent$.outboundSchema = exports.EventUpdateEventEvent$outboundSchema;
})(EventUpdateEventEvent$ || (exports.EventUpdateEventEvent$ = EventUpdateEventEvent$ = {}));
/** @internal */
exports.EventUpdateEvent$inboundSchema = z.object({
    event: z.literal("event_update").default("event_update"),
    data: z.string().transform((v, ctx) => {
        try {
            return JSON.parse(v);
        }
        catch (err) {
            ctx.addIssue({
                code: z.ZodIssueCode.custom,
                message: `malformed json: ${err}`,
            });
            return z.NEVER;
        }
    }).pipe(eventupdate_js_1.EventUpdate$inboundSchema),
});
/** @internal */
exports.EventUpdateEvent$outboundSchema = z.object({
    event: z.literal("event_update").default("event_update"),
    data: eventupdate_js_1.EventUpdate$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventUpdateEvent$;
(function (EventUpdateEvent$) {
    /** @deprecated use `EventUpdateEvent$inboundSchema` instead. */
    EventUpdateEvent$.inboundSchema = exports.EventUpdateEvent$inboundSchema;
    /** @deprecated use `EventUpdateEvent$outboundSchema` instead. */
    EventUpdateEvent$.outboundSchema = exports.EventUpdateEvent$outboundSchema;
})(EventUpdateEvent$ || (exports.EventUpdateEvent$ = EventUpdateEvent$ = {}));
//# sourceMappingURL=eventupdateevent.js.map