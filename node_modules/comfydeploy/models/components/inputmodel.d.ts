import * as z from "zod";
export type DefaultValue = string | number | number | boolean | Array<any>;
export type MinValue = number | number;
export type MaxValue = number | number;
/**
 * Step for number slider input types
 */
export type Step = number | number;
export type InputModel = {
    type: string;
    classType: string;
    inputId: string;
    defaultValue?: string | number | number | boolean | Array<any> | null | undefined;
    minValue?: number | number | null | undefined;
    maxValue?: number | number | null | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    /**
     * Options for enum input type
     */
    enumOptions?: Array<string> | null | undefined;
    /**
     * Step for number slider input types
     */
    step?: number | number | null | undefined;
};
/** @internal */
export declare const DefaultValue$inboundSchema: z.ZodType<DefaultValue, z.ZodTypeDef, unknown>;
/** @internal */
export type DefaultValue$Outbound = string | number | number | boolean | Array<any>;
/** @internal */
export declare const DefaultValue$outboundSchema: z.ZodType<DefaultValue$Outbound, z.ZodTypeDef, DefaultValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DefaultValue$ {
    /** @deprecated use `DefaultValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DefaultValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `DefaultValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DefaultValue$Outbound, z.ZodTypeDef, DefaultValue>;
    /** @deprecated use `DefaultValue$Outbound` instead. */
    type Outbound = DefaultValue$Outbound;
}
/** @internal */
export declare const MinValue$inboundSchema: z.ZodType<MinValue, z.ZodTypeDef, unknown>;
/** @internal */
export type MinValue$Outbound = number | number;
/** @internal */
export declare const MinValue$outboundSchema: z.ZodType<MinValue$Outbound, z.ZodTypeDef, MinValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MinValue$ {
    /** @deprecated use `MinValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MinValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MinValue$Outbound` instead. */
    type Outbound = MinValue$Outbound;
}
/** @internal */
export declare const MaxValue$inboundSchema: z.ZodType<MaxValue, z.ZodTypeDef, unknown>;
/** @internal */
export type MaxValue$Outbound = number | number;
/** @internal */
export declare const MaxValue$outboundSchema: z.ZodType<MaxValue$Outbound, z.ZodTypeDef, MaxValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MaxValue$ {
    /** @deprecated use `MaxValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MaxValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MaxValue$Outbound` instead. */
    type Outbound = MaxValue$Outbound;
}
/** @internal */
export declare const Step$inboundSchema: z.ZodType<Step, z.ZodTypeDef, unknown>;
/** @internal */
export type Step$Outbound = number | number;
/** @internal */
export declare const Step$outboundSchema: z.ZodType<Step$Outbound, z.ZodTypeDef, Step>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Step$ {
    /** @deprecated use `Step$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `Step$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `Step$Outbound` instead. */
    type Outbound = Step$Outbound;
}
/** @internal */
export declare const InputModel$inboundSchema: z.ZodType<InputModel, z.ZodTypeDef, unknown>;
/** @internal */
export type InputModel$Outbound = {
    type: string;
    class_type: string;
    input_id: string;
    default_value?: string | number | number | boolean | Array<any> | null | undefined;
    min_value?: number | number | null | undefined;
    max_value?: number | number | null | undefined;
    display_name: string;
    description: string;
    enum_options?: Array<string> | null | undefined;
    step?: number | number | null | undefined;
};
/** @internal */
export declare const InputModel$outboundSchema: z.ZodType<InputModel$Outbound, z.ZodTypeDef, InputModel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InputModel$ {
    /** @deprecated use `InputModel$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputModel, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputModel$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputModel$Outbound, z.ZodTypeDef, InputModel>;
    /** @deprecated use `InputModel$Outbound` instead. */
    type Outbound = InputModel$Outbound;
}
//# sourceMappingURL=inputmodel.d.ts.map