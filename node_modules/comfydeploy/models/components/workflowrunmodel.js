"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowRunModel$ = exports.WorkflowRunModel$outboundSchema = exports.WorkflowRunModel$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const workflowrunoutputmodel_js_1 = require("./workflowrunoutputmodel.js");
/** @internal */
exports.WorkflowRunModel$inboundSchema = z.object({
    id: z.string(),
    workflow_version_id: z.nullable(z.string()),
    workflow_inputs: z.nullable(z.any()).optional(),
    workflow_id: z.string(),
    workflow_api: z.nullable(z.any()).optional(),
    machine_id: z.nullable(z.string()),
    origin: z.string(),
    status: z.string(),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    queued_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    gpu_event_id: z.nullable(z.string()),
    gpu: z.nullable(z.string()),
    machine_version: z.nullable(z.string()),
    machine_type: z.nullable(z.string()),
    modal_function_call_id: z.nullable(z.string()),
    user_id: z.nullable(z.string()),
    org_id: z.nullable(z.string()),
    live_status: z.nullable(z.string()),
    progress: z.number().default(0),
    is_realtime: z.boolean().default(false),
    webhook: z.nullable(z.string()),
    webhook_status: z.nullable(z.string()),
    webhook_intermediate_status: z.boolean().default(false),
    outputs: z.array(workflowrunoutputmodel_js_1.WorkflowRunOutputModel$inboundSchema).optional(),
    number: z.number().int(),
    duration: z.nullable(z.number()),
    cold_start_duration: z.nullable(z.number()),
    cold_start_duration_total: z.nullable(z.number()),
    run_duration: z.nullable(z.number()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workflow_version_id": "workflowVersionId",
        "workflow_inputs": "workflowInputs",
        "workflow_id": "workflowId",
        "workflow_api": "workflowApi",
        "machine_id": "machineId",
        "ended_at": "endedAt",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
        "queued_at": "queuedAt",
        "started_at": "startedAt",
        "gpu_event_id": "gpuEventId",
        "machine_version": "machineVersion",
        "machine_type": "machineType",
        "modal_function_call_id": "modalFunctionCallId",
        "user_id": "userId",
        "org_id": "orgId",
        "live_status": "liveStatus",
        "is_realtime": "isRealtime",
        "webhook_status": "webhookStatus",
        "webhook_intermediate_status": "webhookIntermediateStatus",
        "cold_start_duration": "coldStartDuration",
        "cold_start_duration_total": "coldStartDurationTotal",
        "run_duration": "runDuration",
    });
});
/** @internal */
exports.WorkflowRunModel$outboundSchema = z.object({
    id: z.string(),
    workflowVersionId: z.nullable(z.string()),
    workflowInputs: z.nullable(z.any()).optional(),
    workflowId: z.string(),
    workflowApi: z.nullable(z.any()).optional(),
    machineId: z.nullable(z.string()),
    origin: z.string(),
    status: z.string(),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
    queuedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    gpuEventId: z.nullable(z.string()),
    gpu: z.nullable(z.string()),
    machineVersion: z.nullable(z.string()),
    machineType: z.nullable(z.string()),
    modalFunctionCallId: z.nullable(z.string()),
    userId: z.nullable(z.string()),
    orgId: z.nullable(z.string()),
    liveStatus: z.nullable(z.string()),
    progress: z.number().default(0),
    isRealtime: z.boolean().default(false),
    webhook: z.nullable(z.string()),
    webhookStatus: z.nullable(z.string()),
    webhookIntermediateStatus: z.boolean().default(false),
    outputs: z.array(workflowrunoutputmodel_js_1.WorkflowRunOutputModel$outboundSchema).optional(),
    number: z.number().int(),
    duration: z.nullable(z.number()),
    coldStartDuration: z.nullable(z.number()),
    coldStartDurationTotal: z.nullable(z.number()),
    runDuration: z.nullable(z.number()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workflowVersionId: "workflow_version_id",
        workflowInputs: "workflow_inputs",
        workflowId: "workflow_id",
        workflowApi: "workflow_api",
        machineId: "machine_id",
        endedAt: "ended_at",
        createdAt: "created_at",
        updatedAt: "updated_at",
        queuedAt: "queued_at",
        startedAt: "started_at",
        gpuEventId: "gpu_event_id",
        machineVersion: "machine_version",
        machineType: "machine_type",
        modalFunctionCallId: "modal_function_call_id",
        userId: "user_id",
        orgId: "org_id",
        liveStatus: "live_status",
        isRealtime: "is_realtime",
        webhookStatus: "webhook_status",
        webhookIntermediateStatus: "webhook_intermediate_status",
        coldStartDuration: "cold_start_duration",
        coldStartDurationTotal: "cold_start_duration_total",
        runDuration: "run_duration",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WorkflowRunModel$;
(function (WorkflowRunModel$) {
    /** @deprecated use `WorkflowRunModel$inboundSchema` instead. */
    WorkflowRunModel$.inboundSchema = exports.WorkflowRunModel$inboundSchema;
    /** @deprecated use `WorkflowRunModel$outboundSchema` instead. */
    WorkflowRunModel$.outboundSchema = exports.WorkflowRunModel$outboundSchema;
})(WorkflowRunModel$ || (exports.WorkflowRunModel$ = WorkflowRunModel$ = {}));
//# sourceMappingURL=workflowrunmodel.js.map