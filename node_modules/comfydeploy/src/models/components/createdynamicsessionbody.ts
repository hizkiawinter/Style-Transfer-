/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  DepsBody,
  DepsBody$inboundSchema,
  DepsBody$Outbound,
  DepsBody$outboundSchema,
} from "./depsbody.js";
import {
  MachineGPU,
  MachineGPU$inboundSchema,
  MachineGPU$outboundSchema,
} from "./machinegpu.js";

/**
 * The dependencies to use, either as a DepsBody or a list of shorthand strings
 */
export type Dependencies = DepsBody | Array<string>;

export type CreateDynamicSessionBody = {
  machineId: string;
  gpu?: MachineGPU | undefined;
  /**
   * The timeout in minutes
   */
  timeout?: number | null | undefined;
  /**
   * The dependencies to use, either as a DepsBody or a list of shorthand strings
   */
  dependencies?: DepsBody | Array<string> | null | undefined;
  /**
   * Whether to create the session asynchronously
   */
  waitForServer?: boolean | undefined;
};

/** @internal */
export const Dependencies$inboundSchema: z.ZodType<
  Dependencies,
  z.ZodTypeDef,
  unknown
> = z.union([DepsBody$inboundSchema, z.array(z.string())]);

/** @internal */
export type Dependencies$Outbound = DepsBody$Outbound | Array<string>;

/** @internal */
export const Dependencies$outboundSchema: z.ZodType<
  Dependencies$Outbound,
  z.ZodTypeDef,
  Dependencies
> = z.union([DepsBody$outboundSchema, z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dependencies$ {
  /** @deprecated use `Dependencies$inboundSchema` instead. */
  export const inboundSchema = Dependencies$inboundSchema;
  /** @deprecated use `Dependencies$outboundSchema` instead. */
  export const outboundSchema = Dependencies$outboundSchema;
  /** @deprecated use `Dependencies$Outbound` instead. */
  export type Outbound = Dependencies$Outbound;
}

/** @internal */
export const CreateDynamicSessionBody$inboundSchema: z.ZodType<
  CreateDynamicSessionBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  machine_id: z.string(),
  gpu: MachineGPU$inboundSchema.optional(),
  timeout: z.nullable(z.number().int()).optional(),
  dependencies: z.nullable(
    z.union([DepsBody$inboundSchema, z.array(z.string())]),
  ).optional(),
  wait_for_server: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "machine_id": "machineId",
    "wait_for_server": "waitForServer",
  });
});

/** @internal */
export type CreateDynamicSessionBody$Outbound = {
  machine_id: string;
  gpu?: string | undefined;
  timeout?: number | null | undefined;
  dependencies?: DepsBody$Outbound | Array<string> | null | undefined;
  wait_for_server: boolean;
};

/** @internal */
export const CreateDynamicSessionBody$outboundSchema: z.ZodType<
  CreateDynamicSessionBody$Outbound,
  z.ZodTypeDef,
  CreateDynamicSessionBody
> = z.object({
  machineId: z.string(),
  gpu: MachineGPU$outboundSchema.optional(),
  timeout: z.nullable(z.number().int()).optional(),
  dependencies: z.nullable(
    z.union([DepsBody$outboundSchema, z.array(z.string())]),
  ).optional(),
  waitForServer: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    machineId: "machine_id",
    waitForServer: "wait_for_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDynamicSessionBody$ {
  /** @deprecated use `CreateDynamicSessionBody$inboundSchema` instead. */
  export const inboundSchema = CreateDynamicSessionBody$inboundSchema;
  /** @deprecated use `CreateDynamicSessionBody$outboundSchema` instead. */
  export const outboundSchema = CreateDynamicSessionBody$outboundSchema;
  /** @deprecated use `CreateDynamicSessionBody$Outbound` instead. */
  export type Outbound = CreateDynamicSessionBody$Outbound;
}
