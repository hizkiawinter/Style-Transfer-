/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  CustomNode,
  CustomNode$inboundSchema,
  CustomNode$Outbound,
  CustomNode$outboundSchema,
} from "./customnode.js";

export type DependencyGraph = {
  comfyui: string;
  models: { [k: string]: string };
  missingNodes: Array<string>;
  customNodes: { [k: string]: CustomNode };
  files: { [k: string]: string };
};

/** @internal */
export const DependencyGraph$inboundSchema: z.ZodType<
  DependencyGraph,
  z.ZodTypeDef,
  unknown
> = z.object({
  comfyui: z.string(),
  models: z.record(z.string()),
  missing_nodes: z.array(z.string()),
  custom_nodes: z.record(CustomNode$inboundSchema),
  files: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    "missing_nodes": "missingNodes",
    "custom_nodes": "customNodes",
  });
});

/** @internal */
export type DependencyGraph$Outbound = {
  comfyui: string;
  models: { [k: string]: string };
  missing_nodes: Array<string>;
  custom_nodes: { [k: string]: CustomNode$Outbound };
  files: { [k: string]: string };
};

/** @internal */
export const DependencyGraph$outboundSchema: z.ZodType<
  DependencyGraph$Outbound,
  z.ZodTypeDef,
  DependencyGraph
> = z.object({
  comfyui: z.string(),
  models: z.record(z.string()),
  missingNodes: z.array(z.string()),
  customNodes: z.record(CustomNode$outboundSchema),
  files: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    missingNodes: "missing_nodes",
    customNodes: "custom_nodes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DependencyGraph$ {
  /** @deprecated use `DependencyGraph$inboundSchema` instead. */
  export const inboundSchema = DependencyGraph$inboundSchema;
  /** @deprecated use `DependencyGraph$outboundSchema` instead. */
  export const outboundSchema = DependencyGraph$outboundSchema;
  /** @deprecated use `DependencyGraph$Outbound` instead. */
  export type Outbound = DependencyGraph$Outbound;
}
