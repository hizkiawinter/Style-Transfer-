/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type CustomNode = {
  pip?: Array<string> | null | undefined;
  url: string;
  hash?: string | null | undefined;
  installType: string;
  files?: Array<string> | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CustomNode$inboundSchema: z.ZodType<
  CustomNode,
  z.ZodTypeDef,
  unknown
> = z.object({
  pip: z.nullable(z.array(z.string())).optional(),
  url: z.string(),
  hash: z.nullable(z.string()).optional(),
  install_type: z.string(),
  files: z.nullable(z.array(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "install_type": "installType",
  });
});

/** @internal */
export type CustomNode$Outbound = {
  pip?: Array<string> | null | undefined;
  url: string;
  hash?: string | null | undefined;
  install_type: string;
  files?: Array<string> | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CustomNode$outboundSchema: z.ZodType<
  CustomNode$Outbound,
  z.ZodTypeDef,
  CustomNode
> = z.object({
  pip: z.nullable(z.array(z.string())).optional(),
  url: z.string(),
  hash: z.nullable(z.string()).optional(),
  installType: z.string(),
  files: z.nullable(z.array(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    installType: "install_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomNode$ {
  /** @deprecated use `CustomNode$inboundSchema` instead. */
  export const inboundSchema = CustomNode$inboundSchema;
  /** @deprecated use `CustomNode$outboundSchema` instead. */
  export const outboundSchema = CustomNode$outboundSchema;
  /** @deprecated use `CustomNode$Outbound` instead. */
  export type Outbound = CustomNode$Outbound;
}
