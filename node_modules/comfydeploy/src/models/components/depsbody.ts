/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  DependencyGraph,
  DependencyGraph$inboundSchema,
  DependencyGraph$Outbound,
  DependencyGraph$outboundSchema,
} from "./dependencygraph.js";

export type Snapshot = {};

export type DepsBody = {
  dockerCommandSteps?: any | undefined;
  dependencies?: DependencyGraph | null | undefined;
  snapshot?: Snapshot | null | undefined;
  comfyuiVersion?: string | undefined;
  extraDockerCommands?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const Snapshot$inboundSchema: z.ZodType<
  Snapshot,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Snapshot$Outbound = {};

/** @internal */
export const Snapshot$outboundSchema: z.ZodType<
  Snapshot$Outbound,
  z.ZodTypeDef,
  Snapshot
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Snapshot$ {
  /** @deprecated use `Snapshot$inboundSchema` instead. */
  export const inboundSchema = Snapshot$inboundSchema;
  /** @deprecated use `Snapshot$outboundSchema` instead. */
  export const outboundSchema = Snapshot$outboundSchema;
  /** @deprecated use `Snapshot$Outbound` instead. */
  export type Outbound = Snapshot$Outbound;
}

/** @internal */
export const DepsBody$inboundSchema: z.ZodType<
  DepsBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  docker_command_steps: z.any().optional(),
  dependencies: z.nullable(DependencyGraph$inboundSchema).optional(),
  snapshot: z.nullable(z.lazy(() => Snapshot$inboundSchema)).optional(),
  comfyui_version: z.string().default(
    "8ce2a1052ca03183768da0aaa483024e58b8008c",
  ),
  extra_docker_commands: z.nullable(z.array(z.record(z.string()))).optional(),
}).transform((v) => {
  return remap$(v, {
    "docker_command_steps": "dockerCommandSteps",
    "comfyui_version": "comfyuiVersion",
    "extra_docker_commands": "extraDockerCommands",
  });
});

/** @internal */
export type DepsBody$Outbound = {
  docker_command_steps?: any | undefined;
  dependencies?: DependencyGraph$Outbound | null | undefined;
  snapshot?: Snapshot$Outbound | null | undefined;
  comfyui_version: string;
  extra_docker_commands?: Array<{ [k: string]: string }> | null | undefined;
};

/** @internal */
export const DepsBody$outboundSchema: z.ZodType<
  DepsBody$Outbound,
  z.ZodTypeDef,
  DepsBody
> = z.object({
  dockerCommandSteps: z.any().optional(),
  dependencies: z.nullable(DependencyGraph$outboundSchema).optional(),
  snapshot: z.nullable(z.lazy(() => Snapshot$outboundSchema)).optional(),
  comfyuiVersion: z.string().default(
    "8ce2a1052ca03183768da0aaa483024e58b8008c",
  ),
  extraDockerCommands: z.nullable(z.array(z.record(z.string()))).optional(),
}).transform((v) => {
  return remap$(v, {
    dockerCommandSteps: "docker_command_steps",
    comfyuiVersion: "comfyui_version",
    extraDockerCommands: "extra_docker_commands",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepsBody$ {
  /** @deprecated use `DepsBody$inboundSchema` instead. */
  export const inboundSchema = DepsBody$inboundSchema;
  /** @deprecated use `DepsBody$outboundSchema` instead. */
  export const outboundSchema = DepsBody$outboundSchema;
  /** @deprecated use `DepsBody$Outbound` instead. */
  export type Outbound = DepsBody$Outbound;
}
